/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var SparqlParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,12,13,15,16,28,35,41,50,55,109,119,122,124,125,134,135,140,198,222,227,315,325,326,327,328,329],$V1=[2,216],$V2=[109,119,122,124,125,134,135,140,325,326,327,328,329],$V3=[2,394],$V4=[1,22],$V5=[1,31],$V6=[13,16,35,198,222,227,315],$V7=[6,90],$V8=[45,46,58],$V9=[45,58],$Va=[1,62],$Vb=[1,64],$Vc=[1,60],$Vd=[1,63],$Ve=[1,69],$Vf=[1,70],$Vg=[26,34,35],$Vh=[13,16,35,198,222,315],$Vi=[13,16,315],$Vj=[121,143,323,330],$Vk=[13,16,121,143,315],$Vl=[1,96],$Vm=[1,100],$Vn=[1,102],$Vo=[121,143,323,324,330],$Vp=[13,16,121,143,315,324],$Vq=[1,108],$Vr=[2,258],$Vs=[1,107],$Vt=[13,16,34,35,87,93,229,234,248,249,302,303,304,305,306,307,308,309,310,311,312,313,314,315],$Vu=[6,45,46,58,68,75,78,86,88,90],$Vv=[6,13,16,34,45,46,58,68,75,78,86,88,90,315],$Vw=[6,13,16,26,34,35,37,38,45,46,48,58,68,75,78,86,87,88,90,93,101,118,121,134,135,137,142,169,170,172,175,176,177,194,198,222,227,229,230,234,238,248,249,253,257,261,274,276,281,298,302,303,304,305,306,307,308,309,310,311,312,313,314,315,331,333,334,336,337,338,339,340,341,342],$Vx=[34,35,45,46,58],$Vy=[1,139],$Vz=[1,140],$VA=[1,151],$VB=[1,131],$VC=[1,125],$VD=[1,130],$VE=[1,132],$VF=[1,142],$VG=[1,143],$VH=[1,144],$VI=[1,145],$VJ=[1,147],$VK=[1,148],$VL=[2,466],$VM=[1,157],$VN=[1,158],$VO=[1,159],$VP=[1,152],$VQ=[1,153],$VR=[1,156],$VS=[1,166],$VT=[1,167],$VU=[1,168],$VV=[1,169],$VW=[1,170],$VX=[1,171],$VY=[1,172],$VZ=[1,173],$V_=[1,174],$V$=[1,175],$V01=[1,165],$V11=[1,160],$V21=[1,161],$V31=[1,162],$V41=[1,163],$V51=[1,164],$V61=[6,13,16,34,35,46,48,87,90,93,121,169,170,172,175,176,177,229,234,248,249,302,303,304,305,306,307,308,309,310,311,312,313,314,315,331],$V71=[2,317],$V81=[1,201],$V91=[1,199],$Va1=[6,194],$Vb1=[2,334],$Vc1=[2,322],$Vd1=[45,137],$Ve1=[6,48,78,86,88,90],$Vf1=[2,262],$Vg1=[1,215],$Vh1=[1,217],$Vi1=[6,48,75,78,86,88,90],$Vj1=[2,260],$Vk1=[1,223],$Vl1=[1,235],$Vm1=[1,233],$Vn1=[1,241],$Vo1=[1,234],$Vp1=[1,239],$Vq1=[1,240],$Vr1=[6,68,75,78,86,88,90],$Vs1=[37,38,194,253,281],$Vt1=[37,38,194,253,257,281],$Vu1=[37,38,194,253,257,261,274,276,281,298,309,310,311,312,313,314,337,338,339,340,341,342],$Vv1=[26,37,38,194,253,257,261,274,276,281,298,309,310,311,312,313,314,334,337,338,339,340,341,342],$Vw1=[1,269],$Vx1=[1,268],$Vy1=[6,13,16,26,34,35,37,38,46,48,75,78,81,83,86,87,88,90,93,121,169,170,172,175,176,177,194,229,234,248,249,253,257,261,274,276,278,279,280,281,282,284,285,287,288,291,293,298,302,303,304,305,306,307,308,309,310,311,312,313,314,315,331,334,337,338,339,340,341,342,343,344,345,346,347],$Vz1=[1,277],$VA1=[1,276],$VB1=[13,16,26,34,35,37,38,46,48,87,90,93,101,121,169,170,172,175,176,177,194,198,222,227,229,230,234,238,248,249,253,257,261,274,276,281,298,302,303,304,305,306,307,308,309,310,311,312,313,314,315,331,334,337,338,339,340,341,342],$VC1=[35,93],$VD1=[13,16,26,34,35,37,38,46,48,87,90,93,101,121,169,170,172,175,176,177,194,198,222,227,229,230,234,238,248,249,253,257,261,274,276,281,298,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,331,334,337,338,339,340,341,342],$VE1=[13,16,48,87,101,234,302,303,304,305,306,307,308,309,310,311,312,313,314,315],$VF1=[48,93],$VG1=[34,38],$VH1=[6,13,16,34,35,38,87,93,229,234,248,249,302,303,304,305,306,307,308,309,310,311,312,313,314,315,333,334],$VI1=[6,13,16,26,34,35,38,87,93,229,234,248,249,274,302,303,304,305,306,307,308,309,310,311,312,313,314,315,333,334,336],$VJ1=[1,302],$VK1=[1,303],$VL1=[6,118,194],$VM1=[48,121],$VN1=[6,48,86,88,90],$VO1=[2,346],$VP1=[2,338],$VQ1=[1,343],$VR1=[1,345],$VS1=[48,121,331],$VT1=[13,16,34,198,315],$VU1=[13,16,34,35,38,46,48,87,90,93,121,169,170,172,175,176,177,194,198,222,227,229,230,234,238,248,249,281,302,303,304,305,306,307,308,309,310,311,312,313,314,315,331],$VV1=[13,16,34,35,87,222,274,276,278,279,280,282,284,285,287,288,291,293,302,303,304,305,306,307,308,309,310,311,312,313,314,315,342,343,344,345,346,347],$VW1=[1,377],$VX1=[1,378],$VY1=[13,16,26,34,35,87,222,274,276,278,279,280,282,284,285,287,288,291,293,302,303,304,305,306,307,308,309,310,311,312,313,314,315,342,343,344,345,346,347],$VZ1=[1,401],$V_1=[1,402],$V$1=[13,16,38,198,227,315],$V02=[1,421],$V12=[6,48,90],$V22=[6,13,16,35,48,78,86,88,90,278,279,280,282,284,285,287,288,291,293,315,342,343,344,345,346,347],$V32=[6,13,16,34,35,46,48,78,81,83,86,87,88,90,93,121,169,170,172,175,176,177,229,234,248,249,278,279,280,282,284,285,287,288,291,293,302,303,304,305,306,307,308,309,310,311,312,313,314,315,331,342,343,344,345,346,347],$V42=[46,48,90,121,169,170,172,175,176,177],$V52=[1,440],$V62=[1,441],$V72=[1,447],$V82=[1,446],$V92=[48,121,194,230,331],$Va2=[13,16,34,35,38,87,93,229,234,248,249,302,303,304,305,306,307,308,309,310,311,312,313,314,315],$Vb2=[13,16,34,35,38,48,87,93,121,194,229,230,234,248,249,281,302,303,304,305,306,307,308,309,310,311,312,313,314,315,331],$Vc2=[13,16,38,48,87,101,234,302,303,304,305,306,307,308,309,310,311,312,313,314,315],$Vd2=[35,48],$Ve2=[2,337],$Vf2=[1,503],$Vg2=[1,500],$Vh2=[1,501],$Vi2=[6,13,16,26,34,35,37,38,46,48,68,75,78,81,83,86,87,88,90,93,121,169,170,172,175,176,177,194,229,234,248,249,253,257,261,274,276,278,279,280,281,282,284,285,287,288,291,293,298,302,303,304,305,306,307,308,309,310,311,312,313,314,315,331,332,334,337,338,339,340,341,342,343,344,345,346,347],$Vj2=[1,522],$Vk2=[46,48,90,121,169,170,172,175,176,177,331],$Vl2=[13,16,34,35,198,222,227,315],$Vm2=[6,13,16,34,35,48,75,78,86,88,90,278,279,280,282,284,285,287,288,291,293,315,342,343,344,345,346,347],$Vn2=[13,16,34,35,38,48,87,93,121,194,198,229,230,234,248,249,281,302,303,304,305,306,307,308,309,310,311,312,313,314,315,331],$Vo2=[6,13,16,34,35,48,81,83,86,88,90,278,279,280,282,284,285,287,288,291,293,315,342,343,344,345,346,347],$Vp2=[13,16,34,35,46,48,87,90,93,121,169,170,172,175,176,177,229,234,248,249,302,303,304,305,306,307,308,309,310,311,312,313,314,315],$Vq2=[13,16,34,315],$Vr2=[13,16,34,35,46,48,87,90,93,121,169,170,172,175,176,177,229,234,248,249,302,303,304,305,306,307,308,309,310,311,312,313,314,315,331],$Vs2=[2,349],$Vt2=[13,16,34,35,38,46,48,87,90,93,121,169,170,172,175,176,177,194,229,230,234,248,249,281,302,303,304,305,306,307,308,309,310,311,312,313,314,315,331],$Vu2=[13,16,34,35,37,38,46,48,87,90,93,121,169,170,172,175,176,177,194,198,222,227,229,230,234,238,248,249,281,302,303,304,305,306,307,308,309,310,311,312,313,314,315,331],$Vv2=[2,344],$Vw2=[13,16,34,35,38,46,48,87,90,93,121,169,170,172,175,176,177,194,198,222,227,229,230,234,248,249,281,302,303,304,305,306,307,308,309,310,311,312,313,314,315,331],$Vx2=[13,16,38,87,101,234,302,303,304,305,306,307,308,309,310,311,312,313,314,315],$Vy2=[46,48,90,121,169,170,172,175,176,177,194,230,331],$Vz2=[13,16,34,38,48,87,101,198,234,238,302,303,304,305,306,307,308,309,310,311,312,313,314,315],$VA2=[13,16,34,35,48,87,93,121,229,234,248,249,302,303,304,305,306,307,308,309,310,311,312,313,314,315],$VB2=[2,332];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"QueryOrUpdate":3,"Prologue":4,"QueryOrUpdate_group0":5,"EOF":6,"Prologue_repetition0":7,"Query":8,"Query_group0":9,"Query_option0":10,"BaseDecl":11,"BASE":12,"IRIREF":13,"PrefixDecl":14,"PREFIX":15,"PNAME_NS":16,"SelectQuery":17,"SelectClauseWildcard":18,"SelectQuery_repetition0":19,"WhereClause":20,"SolutionModifierNoGroup":21,"SelectClauseVars":22,"SelectQuery_repetition1":23,"SolutionModifier":24,"SelectClauseBase":25,"*":26,"SelectClauseVars_repetition_plus0":27,"SELECT":28,"SelectClauseBase_option0":29,"SubSelect":30,"SubSelect_option0":31,"SubSelect_option1":32,"SelectClauseItem":33,"VAR":34,"(":35,"Expression":36,"AS":37,")":38,"VarTriple":39,"ConstructQuery":40,"CONSTRUCT":41,"ConstructTemplate":42,"ConstructQuery_repetition0":43,"ConstructQuery_repetition1":44,"WHERE":45,"{":46,"ConstructQuery_option0":47,"}":48,"DescribeQuery":49,"DESCRIBE":50,"DescribeQuery_group0":51,"DescribeQuery_repetition0":52,"DescribeQuery_option0":53,"AskQuery":54,"ASK":55,"AskQuery_repetition0":56,"DatasetClause":57,"FROM":58,"DatasetClause_option0":59,"iri":60,"WhereClause_option0":61,"GroupGraphPattern":62,"SolutionModifier_option0":63,"SolutionModifierNoGroup_option0":64,"SolutionModifierNoGroup_option1":65,"SolutionModifierNoGroup_option2":66,"GroupClause":67,"GROUP":68,"BY":69,"GroupClause_repetition_plus0":70,"GroupCondition":71,"BuiltInCall":72,"FunctionCall":73,"HavingClause":74,"HAVING":75,"HavingClause_repetition_plus0":76,"OrderClause":77,"ORDER":78,"OrderClause_repetition_plus0":79,"OrderCondition":80,"ASC":81,"BrackettedExpression":82,"DESC":83,"Constraint":84,"LimitOffsetClauses":85,"LIMIT":86,"INTEGER":87,"OFFSET":88,"ValuesClause":89,"VALUES":90,"InlineData":91,"DataBlockValueSource":92,"NIL":93,"InlineData_repetition0":94,"InlineData_repetition_plus1":95,"DataBlockValueListSource":96,"DataBlockValueSource_repetition0":97,"DataBlockValue":98,"Literal":99,"ConstTriple":100,"UNDEF":101,"DataBlockValueListSource_repetition0":102,"DataBlockValueList":103,"DataBlockValueList_repetition_plus0":104,"Update":105,"Update_repetition0":106,"Update1":107,"Update_option0":108,"LOAD":109,"Update1_option0":110,"Update1_option1":111,"Update1_group0":112,"Update1_option2":113,"GraphRefAll":114,"Update1_group1":115,"Update1_option3":116,"GraphOrDefault":117,"TO":118,"CREATE":119,"Update1_option4":120,"GRAPH":121,"INSERTDATA":122,"QuadPattern":123,"DELETEDATA":124,"DELETEWHERE":125,"Update1_option5":126,"InsertClause":127,"Update1_option6":128,"Update1_repetition0":129,"Update1_option7":130,"DeleteClause":131,"Update1_option8":132,"Update1_repetition1":133,"DELETE":134,"INSERT":135,"UsingClause":136,"USING":137,"UsingClause_option0":138,"WithClause":139,"WITH":140,"IntoGraphClause":141,"INTO":142,"DEFAULT":143,"GraphOrDefault_option0":144,"GraphRefAll_group0":145,"QuadPattern_option0":146,"QuadPattern_repetition0":147,"QuadsNotTriples":148,"QuadsNotTriples_group0":149,"QuadsNotTriples_option0":150,"QuadsNotTriples_option1":151,"QuadsNotTriples_option2":152,"TriplesTemplate":153,"TriplesTemplate_repetition0":154,"TriplesSameSubject":155,"TriplesTemplate_option0":156,"GroupGraphPatternSub":157,"GroupGraphPatternSub_option0":158,"GroupGraphPatternSub_repetition0":159,"GroupGraphPatternSubTail":160,"GraphPatternNotTriples":161,"GroupGraphPatternSubTail_option0":162,"GroupGraphPatternSubTail_option1":163,"TriplesBlock":164,"TriplesBlock_repetition0":165,"TriplesSameSubjectPath":166,"TriplesBlock_option0":167,"GraphPatternNotTriples_repetition0":168,"OPTIONAL":169,"MINUS":170,"GraphPatternNotTriples_group0":171,"SERVICE":172,"GraphPatternNotTriples_option0":173,"GraphPatternNotTriples_group1":174,"FILTER":175,"BIND":176,"QUERY":177,"FunctionCall_option0":178,"FunctionCall_repetition0":179,"ExpressionList":180,"ExpressionList_repetition0":181,"ConstructTemplate_option0":182,"ConstructTriples":183,"ConstructTriples_repetition0":184,"ConstructTriples_option0":185,"TriplesSameSubject_group0":186,"PropertyListNotEmpty":187,"TriplesNode":188,"PropertyList":189,"PropertyList_option0":190,"VerbObjectList":191,"PropertyListNotEmpty_repetition0":192,"SemiOptionalVerbObjectList":193,";":194,"SemiOptionalVerbObjectList_option0":195,"Verb":196,"ObjectList":197,"a":198,"ObjectList_repetition0":199,"GraphNode":200,"ObjectListPath":201,"ObjectListPath_repetition0":202,"GraphNodePath":203,"TriplesSameSubjectPath_group0":204,"PropertyListPathNotEmpty":205,"TriplesNodePath":206,"TriplesSameSubjectPath_option0":207,"PropertyListPathNotEmpty_group0":208,"PropertyListPathNotEmpty_repetition0":209,"PropertyListPathNotEmpty_repetition1":210,"PropertyListPathNotEmptyTail":211,"PropertyListPathNotEmptyTail_group0":212,"Path":213,"Path_repetition0":214,"PathSequence":215,"PathSequence_repetition0":216,"PathEltOrInverse":217,"PathElt":218,"PathPrimary":219,"PathElt_option0":220,"PathEltOrInverse_option0":221,"!":222,"PathNegatedPropertySet":223,"PathOneInPropertySet":224,"PathNegatedPropertySet_repetition0":225,"PathNegatedPropertySet_option0":226,"^":227,"TriplesNode_repetition_plus0":228,"[":229,"]":230,"TriplesNodePath_repetition_plus0":231,"GraphNode_group0":232,"GraphNodePath_group0":233,"<<":234,"VarTriple_group0":235,"VarTriple_group1":236,"VarTriple_group2":237,">>":238,"VarTriple_group3":239,"VarTriple_group4":240,"ConstTriple_group0":241,"ConstTriple_group1":242,"ConstTriple_group2":243,"ConstTriple_group3":244,"ConstTriple_group4":245,"VarOrTerm":246,"Term":247,"BLANK_NODE_LABEL":248,"ANON":249,"ConditionalAndExpression":250,"Expression_repetition0":251,"ExpressionTail":252,"||":253,"RelationalExpression":254,"ConditionalAndExpression_repetition0":255,"ConditionalAndExpressionTail":256,"&&":257,"AdditiveExpression":258,"RelationalExpression_group0":259,"RelationalExpression_option0":260,"IN":261,"MultiplicativeExpression":262,"AdditiveExpression_repetition0":263,"AdditiveExpressionTail":264,"AdditiveExpressionTail_group0":265,"NumericLiteralPositive":266,"AdditiveExpressionTail_repetition0":267,"NumericLiteralNegative":268,"AdditiveExpressionTail_repetition1":269,"UnaryExpression":270,"MultiplicativeExpression_repetition0":271,"MultiplicativeExpressionTail":272,"MultiplicativeExpressionTail_group0":273,"+":274,"PrimaryExpression":275,"-":276,"Aggregate":277,"FUNC_ARITY0":278,"FUNC_ARITY1":279,"FUNC_ARITY2":280,",":281,"IF":282,"BuiltInCall_group0":283,"BOUND":284,"BNODE":285,"BuiltInCall_option0":286,"EXISTS":287,"COUNT":288,"Aggregate_option0":289,"Aggregate_group0":290,"FUNC_AGGREGATE":291,"Aggregate_option1":292,"GROUP_CONCAT":293,"Aggregate_option2":294,"Aggregate_option3":295,"GroupConcatSeparator":296,"SEPARATOR":297,"=":298,"String":299,"LANGTAG":300,"^^":301,"DECIMAL":302,"DOUBLE":303,"BOOLEAN":304,"STRING_LITERAL1":305,"STRING_LITERAL2":306,"STRING_LITERAL_LONG1":307,"STRING_LITERAL_LONG2":308,"INTEGER_POSITIVE":309,"DECIMAL_POSITIVE":310,"DOUBLE_POSITIVE":311,"INTEGER_NEGATIVE":312,"DECIMAL_NEGATIVE":313,"DOUBLE_NEGATIVE":314,"PNAME_LN":315,"QueryOrUpdate_group0_option0":316,"Prologue_repetition0_group0":317,"SelectClauseBase_option0_group0":318,"DISTINCT":319,"REDUCED":320,"DescribeQuery_group0_repetition_plus0_group0":321,"DescribeQuery_group0_repetition_plus0":322,"NAMED":323,"SILENT":324,"CLEAR":325,"DROP":326,"ADD":327,"MOVE":328,"COPY":329,"ALL":330,".":331,"UNION":332,"|":333,"/":334,"PathElt_option0_group0":335,"?":336,"!=":337,"<":338,">":339,"<=":340,">=":341,"NOT":342,"CONCAT":343,"COALESCE":344,"SUBSTR":345,"REGEX":346,"REPLACE":347,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",12:"BASE",13:"IRIREF",15:"PREFIX",16:"PNAME_NS",26:"*",28:"SELECT",34:"VAR",35:"(",37:"AS",38:")",41:"CONSTRUCT",45:"WHERE",46:"{",48:"}",50:"DESCRIBE",55:"ASK",58:"FROM",68:"GROUP",69:"BY",75:"HAVING",78:"ORDER",81:"ASC",83:"DESC",86:"LIMIT",87:"INTEGER",88:"OFFSET",90:"VALUES",93:"NIL",101:"UNDEF",109:"LOAD",118:"TO",119:"CREATE",121:"GRAPH",122:"INSERTDATA",124:"DELETEDATA",125:"DELETEWHERE",134:"DELETE",135:"INSERT",137:"USING",140:"WITH",142:"INTO",143:"DEFAULT",169:"OPTIONAL",170:"MINUS",172:"SERVICE",175:"FILTER",176:"BIND",177:"QUERY",194:";",198:"a",222:"!",227:"^",229:"[",230:"]",234:"<<",238:">>",248:"BLANK_NODE_LABEL",249:"ANON",253:"||",257:"&&",261:"IN",274:"+",276:"-",278:"FUNC_ARITY0",279:"FUNC_ARITY1",280:"FUNC_ARITY2",281:",",282:"IF",284:"BOUND",285:"BNODE",287:"EXISTS",288:"COUNT",291:"FUNC_AGGREGATE",293:"GROUP_CONCAT",297:"SEPARATOR",298:"=",300:"LANGTAG",301:"^^",302:"DECIMAL",303:"DOUBLE",304:"BOOLEAN",305:"STRING_LITERAL1",306:"STRING_LITERAL2",307:"STRING_LITERAL_LONG1",308:"STRING_LITERAL_LONG2",309:"INTEGER_POSITIVE",310:"DECIMAL_POSITIVE",311:"DOUBLE_POSITIVE",312:"INTEGER_NEGATIVE",313:"DECIMAL_NEGATIVE",314:"DOUBLE_NEGATIVE",315:"PNAME_LN",319:"DISTINCT",320:"REDUCED",323:"NAMED",324:"SILENT",325:"CLEAR",326:"DROP",327:"ADD",328:"MOVE",329:"COPY",330:"ALL",331:".",332:"UNION",333:"|",334:"/",336:"?",337:"!=",338:"<",339:">",340:"<=",341:">=",342:"NOT",343:"CONCAT",344:"COALESCE",345:"SUBSTR",346:"REGEX",347:"REPLACE"},
productions_: [0,[3,3],[4,1],[8,2],[11,2],[14,3],[17,4],[17,4],[18,2],[22,2],[25,2],[30,4],[30,4],[33,1],[33,5],[33,5],[40,5],[40,7],[49,5],[54,4],[57,3],[20,2],[24,2],[21,3],[67,3],[71,1],[71,1],[71,3],[71,5],[71,1],[74,2],[77,3],[80,2],[80,2],[80,1],[80,1],[85,2],[85,2],[85,4],[85,4],[89,2],[91,2],[91,4],[91,4],[92,3],[92,2],[98,1],[98,1],[98,1],[98,1],[96,3],[96,2],[103,3],[105,3],[107,4],[107,3],[107,5],[107,4],[107,2],[107,2],[107,2],[107,6],[107,6],[131,2],[127,2],[136,3],[139,2],[141,3],[117,1],[117,2],[114,2],[114,1],[123,4],[148,7],[153,3],[62,3],[62,3],[157,2],[160,3],[164,3],[161,2],[161,2],[161,2],[161,3],[161,4],[161,2],[161,6],[161,6],[161,3],[161,1],[84,1],[84,1],[84,1],[73,2],[73,6],[180,1],[180,4],[42,3],[183,3],[155,2],[155,2],[189,1],[187,2],[193,2],[191,2],[196,1],[196,1],[196,1],[197,2],[201,2],[166,2],[166,2],[205,4],[211,1],[211,3],[213,2],[215,2],[218,2],[217,2],[219,1],[219,1],[219,2],[219,3],[223,1],[223,1],[223,4],[224,1],[224,1],[224,2],[224,2],[188,3],[188,3],[206,3],[206,3],[200,1],[200,1],[203,1],[203,1],[39,9],[39,5],[100,9],[100,5],[246,1],[246,1],[247,1],[247,1],[247,1],[247,1],[247,1],[36,2],[252,2],[250,2],[256,2],[254,1],[254,3],[254,4],[258,2],[264,2],[264,2],[264,2],[262,2],[272,2],[270,2],[270,2],[270,2],[270,1],[275,1],[275,1],[275,1],[275,1],[275,1],[275,1],[82,3],[72,1],[72,2],[72,4],[72,6],[72,8],[72,2],[72,4],[72,2],[72,4],[72,3],[277,5],[277,5],[277,6],[296,4],[99,1],[99,2],[99,3],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[299,1],[299,1],[299,1],[299,1],[266,1],[266,1],[266,1],[268,1],[268,1],[268,1],[60,1],[60,1],[60,1],[316,0],[316,1],[5,1],[5,1],[5,1],[317,1],[317,1],[7,0],[7,2],[9,1],[9,1],[9,1],[9,1],[10,0],[10,1],[19,0],[19,2],[23,0],[23,2],[27,1],[27,2],[318,1],[318,1],[29,0],[29,1],[31,0],[31,1],[32,0],[32,1],[43,0],[43,2],[44,0],[44,2],[47,0],[47,1],[321,1],[321,1],[322,1],[322,2],[51,1],[51,1],[52,0],[52,2],[53,0],[53,1],[56,0],[56,2],[59,0],[59,1],[61,0],[61,1],[63,0],[63,1],[64,0],[64,1],[65,0],[65,1],[66,0],[66,1],[70,1],[70,2],[76,1],[76,2],[79,1],[79,2],[94,0],[94,2],[95,1],[95,2],[97,0],[97,2],[102,0],[102,2],[104,1],[104,2],[106,0],[106,4],[108,0],[108,2],[110,0],[110,1],[111,0],[111,1],[112,1],[112,1],[113,0],[113,1],[115,1],[115,1],[115,1],[116,0],[116,1],[120,0],[120,1],[126,0],[126,1],[128,0],[128,1],[129,0],[129,2],[130,0],[130,1],[132,0],[132,1],[133,0],[133,2],[138,0],[138,1],[144,0],[144,1],[145,1],[145,1],[145,1],[146,0],[146,1],[147,0],[147,2],[149,1],[149,1],[150,0],[150,1],[151,0],[151,1],[152,0],[152,1],[154,0],[154,3],[156,0],[156,1],[158,0],[158,1],[159,0],[159,2],[162,0],[162,1],[163,0],[163,1],[165,0],[165,3],[167,0],[167,1],[168,0],[168,3],[171,1],[171,1],[173,0],[173,1],[174,1],[174,1],[178,0],[178,1],[179,0],[179,3],[181,0],[181,3],[182,0],[182,1],[184,0],[184,3],[185,0],[185,1],[186,1],[186,1],[190,0],[190,1],[192,0],[192,2],[195,0],[195,1],[199,0],[199,3],[202,0],[202,3],[204,1],[204,1],[207,0],[207,1],[208,1],[208,1],[209,0],[209,3],[210,0],[210,2],[212,1],[212,1],[214,0],[214,3],[216,0],[216,3],[335,1],[335,1],[335,1],[220,0],[220,1],[221,0],[221,1],[225,0],[225,3],[226,0],[226,1],[228,1],[228,2],[231,1],[231,2],[232,1],[232,1],[233,1],[233,1],[235,1],[235,1],[236,1],[236,1],[237,1],[237,1],[239,1],[239,1],[240,1],[240,1],[241,1],[241,1],[242,1],[242,1],[243,1],[243,1],[244,1],[244,1],[245,1],[245,1],[251,0],[251,2],[255,0],[255,2],[259,1],[259,1],[259,1],[259,1],[259,1],[259,1],[260,0],[260,1],[263,0],[263,2],[265,1],[265,1],[267,0],[267,2],[269,0],[269,2],[271,0],[271,2],[273,1],[273,1],[283,1],[283,1],[283,1],[283,1],[283,1],[286,0],[286,1],[289,0],[289,1],[290,1],[290,1],[292,0],[292,1],[294,0],[294,1],[295,0],[295,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

      // Set parser options
      $$[$0-1] = $$[$0-1] || {};
      if (Parser.base)
        $$[$0-1].base = Parser.base;
      Parser.base = '';
      $$[$0-1].prefixes = Parser.prefixes;
      Parser.prefixes = null;

      if (Parser.pathOnly) {
        if ($$[$0-1].type === 'path' || 'termType' in $$[$0-1]) {
          return $$[$0-1]
        }
        throw new Error('Received full SPARQL query in path only mode');
      } else if ($$[$0-1].type === 'path' || 'termType' in $$[$0-1]) {
        throw new Error('Received only path in full SPARQL mode');
      }

      // Ensure that blank nodes are not used across INSERT DATA clauses
      if ($$[$0-1].type === 'update') {
        const insertBnodesAll = {};
        for (const update of $$[$0-1].updates) {
          if (update.updateType === 'insert') {
            // Collect bnodes for current insert clause
            const insertBnodes = {};
            for (const operation of update.insert) {
              if (operation.type === 'bgp' || operation.type === 'graph') {
                for (const triple of operation.triples) {
                  if (triple.subject.termType === 'BlankNode')
                    insertBnodes[triple.subject.value] = true;
                  if (triple.predicate.termType === 'BlankNode')
                    insertBnodes[triple.predicate.value] = true;
                  if (triple.object.termType === 'BlankNode')
                    insertBnodes[triple.object.value] = true;
                }
              }
            }

            // Check if the inserting bnodes don't clash with bnodes from a previous insert clause
            for (const bnode of Object.keys(insertBnodes)) {
              if (insertBnodesAll[bnode]) {
                throw new Error('Detected reuse blank node across different INSERT DATA clauses');
              }
              insertBnodesAll[bnode] = true;
            }
          }
        }
      }
      return $$[$0-1];
    
break;
case 3:
this.$ = extend($$[$0-1], $$[$0], { type: 'query' });
break;
case 4:

      Parser.base = resolveIRI($$[$0])
    
break;
case 5:

      if (!Parser.prefixes) Parser.prefixes = {};
      $$[$0-1] = $$[$0-1].substr(0, $$[$0-1].length - 1);
      $$[$0] = resolveIRI($$[$0]);
      Parser.prefixes[$$[$0-1]] = $$[$0];
    
break;
case 6:
this.$ = extend($$[$0-3], groupDatasets($$[$0-2]), $$[$0-1], $$[$0]);
break;
case 7:

      // Check for projection of ungrouped variable
      if (!Parser.skipValidation) {
        const counts = flatten($$[$0-3].variables.map(vars => getAggregatesOfExpression(vars.expression)))
          .some(agg => agg.aggregation === "count" && !(agg.expression instanceof Wildcard));
        if (counts || $$[$0].group) {
          for (const selectVar of $$[$0-3].variables) {
            if (selectVar.termType === "Variable") {
              if (!$$[$0].group || !$$[$0].group.map(groupVar => getExpressionId(groupVar)).includes(getExpressionId(selectVar))) {
                throw Error("Projection of ungrouped variable (?" + getExpressionId(selectVar) + ")");
              }
            } else if (getAggregatesOfExpression(selectVar.expression).length === 0) {
              const usedVars = getVariablesFromExpression(selectVar.expression);
              for (const usedVar of usedVars) {
                if (!$$[$0].group || !$$[$0].group.map || !$$[$0].group.map(groupVar => getExpressionId(groupVar)).includes(getExpressionId(usedVar))) {
                  throw Error("Use of ungrouped variable in projection of operation (?" + getExpressionId(usedVar) + ")");
                }
              }
            }
          }
        }
      }
      // Check if id of each AS-selected column is not yet bound by subquery
      const subqueries = $$[$0-1].where.filter(w => w.type === "query");
      if (subqueries.length > 0) {
        const selectedVarIds = $$[$0-3].variables.filter(v => v.variable && v.variable.value).map(v => v.variable.value);
        const subqueryIds = flatten(subqueries.map(sub => sub.variables)).map(v => v.value || v.variable.value);
        for (const selectedVarId of selectedVarIds) {
          if (subqueryIds.indexOf(selectedVarId) >= 0) {
            throw Error("Target id of 'AS' (?" + selectedVarId + ") already used in subquery");
          }
        }
      }
      this.$ = extend($$[$0-3], groupDatasets($$[$0-2]), $$[$0-1], $$[$0])
    
break;
case 8:
this.$ = extend($$[$0-1], {variables: [new Wildcard()]});
break;
case 9:

      // Check if id of each selected column is different
      const selectedVarIds = $$[$0].map(v => v.value || v.variable.value);
      const duplicates = getDuplicatesInArray(selectedVarIds);
      if (duplicates.length > 0) {
        throw Error("Two or more of the resulting columns have the same name (?" + duplicates[0] + ")");
      }

      this.$ = extend($$[$0-1], { variables: $$[$0] })
    
break;
case 10:
this.$ = extend({ queryType: 'SELECT'}, $$[$0] && ($$[$0-1] = lowercase($$[$0]), $$[$0] = {}, $$[$0][$$[$0-1]] = true, $$[$0]));
break;
case 11: case 12:
this.$ = extend($$[$0-3], $$[$0-2], $$[$0-1], $$[$0], { type: 'query' });
break;
case 13: case 105: case 142: case 171:
this.$ = toVar($$[$0]);
break;
case 14: case 28:
this.$ = expression($$[$0-3], { variable: toVar($$[$0-1]) });
break;
case 15:
this.$ = ensureSparqlStar(expression($$[$0-3], { variable: toVar($$[$0-1]) }));
break;
case 16:
this.$ = extend({ queryType: 'CONSTRUCT', template: $$[$0-3] }, groupDatasets($$[$0-2]), $$[$0-1], $$[$0]);
break;
case 17:
this.$ = extend({ queryType: 'CONSTRUCT', template: $$[$0-2] = ($$[$0-2] ? $$[$0-2].triples : []) }, groupDatasets($$[$0-5]), { where: [ { type: 'bgp', triples: appendAllTo([], $$[$0-2]) } ] }, $$[$0]);
break;
case 18:
this.$ = extend({ queryType: 'DESCRIBE', variables: $$[$0-3] === '*' ? [new Wildcard()] : $$[$0-3].map(toVar) }, groupDatasets($$[$0-2]), $$[$0-1], $$[$0]);
break;
case 19:
this.$ = extend({ queryType: 'ASK' }, groupDatasets($$[$0-2]), $$[$0-1], $$[$0]);
break;
case 20: case 65:
this.$ = { iri: $$[$0], named: !!$$[$0-1] };
break;
case 21:
this.$ = { where: $$[$0].patterns };
break;
case 22:
this.$ = extend($$[$0-1], $$[$0]);
break;
case 23:
this.$ = extend($$[$0-2], $$[$0-1], $$[$0]);
break;
case 24:
this.$ = { group: $$[$0] };
break;
case 25: case 26: case 32: case 34:
this.$ = expression($$[$0]);
break;
case 27:
this.$ = expression($$[$0-1]);
break;
case 29: case 35:
this.$ = expression(toVar($$[$0]));
break;
case 30:
this.$ = { having: $$[$0] };
break;
case 31:
this.$ = { order: $$[$0] };
break;
case 33:
this.$ = expression($$[$0], { descending: true });
break;
case 36:
this.$ = { limit:  toInt($$[$0]) };
break;
case 37:
this.$ = { offset: toInt($$[$0]) };
break;
case 38:
this.$ = { limit: toInt($$[$0-2]), offset: toInt($$[$0]) };
break;
case 39:
this.$ = { limit: toInt($$[$0]), offset: toInt($$[$0-2]) };
break;
case 40:

      if ($$[$0].from) {
        this.$ = { type: 'values', from: $$[$0].from, values: $$[$0].values }
      } else {
        this.$ = { type: 'values', values: $$[$0] }
      }
    
break;
case 41:

      if ($$[$0].from) {
        var value = {}
        value[$$[$0-1]] = {}

        this.$ = {
          from: $$[$0].from,
          values: [value]
        }
      } else {
        this.$ = $$[$0].map(function(v) { var o = {}; o[$$[$0-1]] = v; return o; })
      }
    
break;
case 42:

      this.$ = $$[$0-1].map(function() { return {}; })
    
break;
case 43:

      if ($$[$0].from) {
        var values = $$[$0-2].map(function(v) { var o = {}; o[v] = {}; return o; })

        this.$ = {
          from: $$[$0].from,
          values: values
        }
      } else {
        var length = $$[$0-2].length;
        $$[$0-2] = $$[$0-2].map(toVar);
        this.$ = $$[$0].map(function (values) {
          if (values.length !== length)
            throw Error('Inconsistent VALUES length');
          var valuesObject = {};
          for(var i = 0; i<length; i++)
            valuesObject['?' + $$[$0-2][i].value] = values[i];
          return valuesObject;
        });
      }
    
break;
case 44: case 50: case 52: case 97: case 122: case 172:
this.$ = $$[$0-1];
break;
case 45: case 51:
this.$ = { from: toVar($$[$0]) };
break;
case 48:
this.$ = ensureSparqlStar($$[$0]);
break;
case 49:
this.$ = undefined;
break;
case 53:
this.$ = { type: 'update', updates: appendTo($$[$0-2], $$[$0-1]) };
break;
case 54:
this.$ = extend({ type: 'load', silent: !!$$[$0-2], source: $$[$0-1] }, $$[$0] && { destination: $$[$0] });
break;
case 55:
this.$ = { type: lowercase($$[$0-2]), silent: !!$$[$0-1], graph: $$[$0] };
break;
case 56:
this.$ = { type: lowercase($$[$0-4]), silent: !!$$[$0-3], source: $$[$0-2], destination: $$[$0] };
break;
case 57:
this.$ = { type: 'create', silent: !!$$[$0-2], graph: { type: 'graph', name: $$[$0] } };
break;
case 58:
this.$ = { updateType: 'insert',      insert: ensureNoVariables($$[$0])                 };
break;
case 59:
this.$ = { updateType: 'delete',      delete: ensureNoBnodes(ensureNoVariables($$[$0])) };
break;
case 60:
this.$ = { updateType: 'deletewhere', delete: ensureNoBnodes($$[$0])                    };
break;
case 61:
this.$ = extend({ updateType: 'insertdelete' }, $$[$0-5], { insert: $$[$0-4] || [] }, { delete: $$[$0-3] || [] }, groupDatasets($$[$0-2], 'using'), { where: $$[$0].patterns });
break;
case 62:
this.$ = extend({ updateType: 'insertdelete' }, $$[$0-5], { delete: $$[$0-4] || [] }, { insert: $$[$0-3] || [] }, groupDatasets($$[$0-2], 'using'), { where: $$[$0].patterns });
break;
case 63:
this.$ = ensureNoBnodes($$[$0]);
break;
case 64: case 67: case 165: case 186:
this.$ = $$[$0];
break;
case 66:
this.$ = { graph: $$[$0] };
break;
case 68:
this.$ = { type: 'graph', default: true };
break;
case 69: case 70:
this.$ = { type: 'graph', name: $$[$0] };
break;
case 71:
 this.$ = {}; this.$[lowercase($$[$0])] = true; 
break;
case 72:
this.$ = $$[$0-2] ? unionAll($$[$0-1], [$$[$0-2]]) : unionAll($$[$0-1]);
break;
case 73:

      var graph = extend($$[$0-3] || { triples: [] }, { type: 'graph', name: toVar($$[$0-5]) });
      this.$ = $$[$0] ? [graph, $$[$0]] : [graph];
    
break;
case 74: case 79:
this.$ = { type: 'bgp', triples: unionAll($$[$0-2], [$$[$0-1]]) };
break;
case 75:
this.$ = { type: 'group', patterns: [ $$[$0-1] ] };
break;
case 76:

      // For every binding
      for (const binding of $$[$0-1].filter(el => el.type === "bind")) {
        const index = $$[$0-1].indexOf(binding);
        const boundVars = new Set();
        //Collect all bounded variables before the binding
        for (const el of $$[$0-1].slice(0, index)) {
          if (el.type === "group" || el.type === "bgp") {
            getBoundVarsFromGroupGraphPattern(el).forEach(boundVar => boundVars.add(boundVar));
          }
        }
        // If binding with a non-free variable, throw error
        if (boundVars.has(binding.variable.value)) {
          throw Error("Variable used to bind is already bound (?" + binding.variable.value + ")");
        }
      }
      this.$ = { type: 'group', patterns: $$[$0-1] }
    
break;
case 77:
this.$ = $$[$0-1] ? unionAll([$$[$0-1]], $$[$0]) : unionAll($$[$0]);
break;
case 78:
this.$ = $$[$0] ? [$$[$0-2], $$[$0]] : $$[$0-2];
break;
case 80:

      if ($$[$0-1].length)
        this.$ = { type: 'union', patterns: unionAll($$[$0-1].map(degroupSingle), [degroupSingle($$[$0])]) };
      else
        this.$ = $$[$0];
    
break;
case 81:
this.$ = extend($$[$0], { type: 'optional' });
break;
case 82:
this.$ = extend($$[$0], { type: 'minus' });
break;
case 83:
this.$ = extend($$[$0], { type: 'graph', name: toVar($$[$0-1]) });
break;
case 84:
this.$ = extend($$[$0], { type: 'service', name: toVar($$[$0-1]), silent: !!$$[$0-2] });
break;
case 85:
this.$ = { type: 'filter', expression: $$[$0] };
break;
case 86:
this.$ = { type: 'bind', variable: toVar($$[$0-1]), expression: $$[$0-3] };
break;
case 87:
this.$ = ensureSparqlStar({ type: 'bind', variable: toVar($$[$0-1]), expression: $$[$0-3] });
break;
case 88:
this.$ = extend($$[$0], { type: 'namedQuery', name: toVar($$[$0-1]) });
break;
case 93:
this.$ = { type: 'functionCall', function: $$[$0-1], args: [] };
break;
case 94:
this.$ = { type: 'functionCall', function: $$[$0-5], args: appendTo($$[$0-2], $$[$0-1]), distinct: !!$$[$0-3] };
break;
case 95: case 113: case 124: case 216: case 224: case 226: case 238: case 240: case 250: case 254: case 274: case 278: case 280: case 284: case 307: case 313: case 324: case 334: case 340: case 346: case 350: case 360: case 362: case 366: case 374: case 378: case 380: case 388: case 390: case 394: case 396: case 405: case 437: case 439: case 449: case 453: case 455: case 457:
this.$ = [];
break;
case 96:
this.$ = appendTo($$[$0-2], $$[$0-1]);
break;
case 98:
this.$ = unionAll($$[$0-2], [$$[$0-1]]);
break;
case 99: case 110:
this.$ = $$[$0].map(function (t) { return extend(triple($$[$0-1]), t); });
break;
case 100:
this.$ = appendAllTo($$[$0].map(function (t) { return extend(triple($$[$0-1].entity), t); }), $$[$0-1].triples) /* the subject is a blank node, possibly with more triples */;
break;
case 102:
this.$ = unionAll([$$[$0-1]], $$[$0]);
break;
case 103:
this.$ = unionAll($$[$0]);
break;
case 104:
this.$ = objectListToTriples($$[$0-1], $$[$0]);
break;
case 107: case 120: case 127:
this.$ = Parser.factory.namedNode(RDF_TYPE);
break;
case 108: case 109:
this.$ = appendTo($$[$0-1], $$[$0]);
break;
case 111:
this.$ = !$$[$0] ? $$[$0-1].triples : appendAllTo($$[$0].map(function (t) { return extend(triple($$[$0-1].entity), t); }), $$[$0-1].triples) /* the subject is a blank node, possibly with more triples */;
break;
case 112:
this.$ = objectListToTriples(toVar($$[$0-3]), appendTo($$[$0-2], $$[$0-1]), $$[$0]);
break;
case 114:
this.$ = objectListToTriples(toVar($$[$0-1]), $$[$0]);
break;
case 115:
this.$ = $$[$0-1].length ? path('|',appendTo($$[$0-1], $$[$0])) : $$[$0];
break;
case 116:
this.$ = $$[$0-1].length ? path('/', appendTo($$[$0-1], $$[$0])) : $$[$0];
break;
case 117:
this.$ = $$[$0] ? path($$[$0], [$$[$0-1]]) : $$[$0-1];
break;
case 118:
this.$ = $$[$0-1] ? path($$[$0-1], [$$[$0]]) : $$[$0];;
break;
case 121: case 128:
this.$ = path($$[$0-1], [$$[$0]]);
break;
case 125:
this.$ = path('|', appendTo($$[$0-2], $$[$0-1]));
break;
case 129:
this.$ = path($$[$0-1], [Parser.factory.namedNode(RDF_TYPE)]);
break;
case 130: case 132:
this.$ = createList($$[$0-1]);
break;
case 131: case 133:
this.$ = createAnonymousObject($$[$0-1]);
break;
case 134:
this.$ = { entity: $$[$0], triples: [] } /* for consistency with TriplesNode */;
break;
case 136:
this.$ = { entity: $$[$0], triples: [] } /* for consistency with TriplesNodePath */;
break;
case 138: case 140:
this.$ = ensureSparqlStar(Parser.factory.quad($$[$0-4], $$[$0-3], $$[$0-2], toVar($$[$0-6])));
break;
case 139: case 141:
this.$ = ensureSparqlStar(Parser.factory.quad($$[$0-3], $$[$0-2], $$[$0-1]));
break;
case 146:
this.$ = blank($$[$0].replace(/^(_:)/,''));;
break;
case 147:
this.$ = blank();
break;
case 148:
this.$ = Parser.factory.namedNode(RDF_NIL);
break;
case 149: case 151: case 156: case 160:
this.$ = createOperationTree($$[$0-1], $$[$0]);
break;
case 150:
this.$ = ['||', $$[$0]];
break;
case 152:
this.$ = ['&&', $$[$0]];
break;
case 154:
this.$ = operation($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 155:
this.$ = operation($$[$0-2] ? 'notin' : 'in', [$$[$0-3], $$[$0]]);
break;
case 157: case 161:
this.$ = [$$[$0-1], $$[$0]];
break;
case 158:
this.$ = ['+', createOperationTree($$[$0-1], $$[$0])];
break;
case 159:

      var negatedLiteral = createTypedLiteral($$[$0-1].value.replace('-', ''), $$[$0-1].datatype);
      this.$ = ['-', createOperationTree(negatedLiteral, $$[$0])];
    
break;
case 162:
this.$ = operation('UPLUS', [$$[$0]]);
break;
case 163:
this.$ = operation($$[$0-1], [$$[$0]]);
break;
case 164:
this.$ = operation('UMINUS', [$$[$0]]);
break;
case 174:
this.$ = operation(lowercase($$[$0-1]));
break;
case 175:
this.$ = operation(lowercase($$[$0-3]), [$$[$0-1]]);
break;
case 176:
this.$ = operation(lowercase($$[$0-5]), [$$[$0-3], $$[$0-1]]);
break;
case 177:
this.$ = operation(lowercase($$[$0-7]), [$$[$0-5], $$[$0-3], $$[$0-1]]);
break;
case 178:
this.$ = operation(lowercase($$[$0-1]), $$[$0]);
break;
case 179:
this.$ = operation('bound', [toVar($$[$0-1])]);
break;
case 180:
this.$ = operation($$[$0-1], []);
break;
case 181:
this.$ = operation($$[$0-3], [$$[$0-1]]);
break;
case 182:
this.$ = operation($$[$0-2] ? 'notexists' :'exists', [degroupSingle($$[$0])]);
break;
case 183: case 184:
this.$ = expression($$[$0-1], { type: 'aggregate', aggregation: lowercase($$[$0-4]), distinct: !!$$[$0-2] });
break;
case 185:
this.$ = expression($$[$0-2], { type: 'aggregate', aggregation: lowercase($$[$0-5]), distinct: !!$$[$0-3], separator: $$[$0-1] || ' ' });
break;
case 187:
this.$ = createTypedLiteral($$[$0]);
break;
case 188:
this.$ = createLangLiteral($$[$0-1], lowercase($$[$0].substr(1)));
break;
case 189:
this.$ = createTypedLiteral($$[$0-2], $$[$0]);
break;
case 190: case 203:
this.$ = createTypedLiteral($$[$0], XSD_INTEGER);
break;
case 191: case 204:
this.$ = createTypedLiteral($$[$0], XSD_DECIMAL);
break;
case 192: case 205:
this.$ = createTypedLiteral(lowercase($$[$0]), XSD_DOUBLE);
break;
case 195:
this.$ = createTypedLiteral($$[$0].toLowerCase(), XSD_BOOLEAN);
break;
case 196: case 197:
this.$ = unescapeString($$[$0], 1);
break;
case 198: case 199:
this.$ = unescapeString($$[$0], 3);
break;
case 200:
this.$ = createTypedLiteral($$[$0].substr(1), XSD_INTEGER);
break;
case 201:
this.$ = createTypedLiteral($$[$0].substr(1), XSD_DECIMAL);
break;
case 202:
this.$ = createTypedLiteral($$[$0].substr(1).toLowerCase(), XSD_DOUBLE);
break;
case 206:
this.$ = Parser.factory.namedNode(resolveIRI($$[$0]));
break;
case 207:

      var namePos = $$[$0].indexOf(':'),
          prefix = $$[$0].substr(0, namePos),
          expansion = Parser.prefixes[prefix];
      if (!expansion) throw new Error('Unknown prefix: ' + prefix);
      var uriString = resolveIRI(expansion + $$[$0].substr(namePos + 1));
      this.$ = Parser.factory.namedNode(uriString);
    
break;
case 208:

      $$[$0] = $$[$0].substr(0, $$[$0].length - 1);
      if (!($$[$0] in Parser.prefixes)) throw new Error('Unknown prefix: ' + $$[$0]);
      var uriString = resolveIRI(Parser.prefixes[$$[$0]]);
      this.$ = Parser.factory.namedNode(uriString);
    
break;
case 217: case 225: case 227: case 229: case 239: case 241: case 247: case 251: case 255: case 269: case 271: case 273: case 275: case 277: case 279: case 281: case 283: case 308: case 314: case 325: case 341: case 375: case 391: case 410: case 412: case 438: case 440: case 450: case 454: case 456: case 458:
$$[$0-1].push($$[$0]);
break;
case 228: case 246: case 268: case 270: case 272: case 276: case 282: case 409: case 411:
this.$ = [$$[$0]];
break;
case 285:
$$[$0-3].push($$[$0-2]);
break;
case 335: case 347: case 351: case 361: case 363: case 367: case 379: case 381: case 389: case 395: case 397: case 406:
$$[$0-2].push($$[$0-1]);
break;
}
},
table: [o($V0,$V1,{3:1,4:2,7:3}),{1:[3]},o($V2,[2,284],{5:4,8:5,316:6,213:7,9:8,105:9,214:10,17:11,40:12,49:13,54:14,106:15,18:16,22:17,25:21,6:[2,209],13:$V3,16:$V3,35:$V3,198:$V3,222:$V3,227:$V3,315:$V3,28:$V4,41:[1,18],50:[1,19],55:[1,20]}),o([6,13,16,28,35,41,50,55,109,119,122,124,125,134,135,140,198,222,227,315,325,326,327,328,329],[2,2],{317:23,11:24,14:25,12:[1,26],15:[1,27]}),{6:[1,28]},{6:[2,211]},{6:[2,212]},{6:[2,213]},{6:[2,222],10:29,89:30,90:$V5},{6:[2,210]},o($V6,[2,396],{215:32,216:33}),o($V7,[2,218]),o($V7,[2,219]),o($V7,[2,220]),o($V7,[2,221]),{107:34,109:[1,35],112:36,115:37,119:[1,38],122:[1,39],124:[1,40],125:[1,41],126:42,130:43,134:[2,309],135:[2,303],139:49,140:[1,50],325:[1,44],326:[1,45],327:[1,46],328:[1,47],329:[1,48]},o($V8,[2,224],{19:51}),o($V8,[2,226],{23:52}),o($V9,[2,240],{42:53,44:54,46:[1,55]}),{13:$Va,16:$Vb,26:[1,58],34:$Vc,51:56,60:61,315:$Vd,321:59,322:57},o($V8,[2,254],{56:65}),{26:[1,66],27:67,33:68,34:$Ve,35:$Vf},o($Vg,[2,232],{29:71,318:72,319:[1,73],320:[1,74]}),o($V0,[2,217]),o($V0,[2,214]),o($V0,[2,215]),{13:[1,75]},{16:[1,76]},{1:[2,1]},{6:[2,3]},{6:[2,223]},{34:[1,78],35:[1,80],91:77,93:[1,79]},o([6,13,16,34,35,38,87,93,229,234,248,249,302,303,304,305,306,307,308,309,310,311,312,313,314,315],[2,115],{333:[1,81]}),o($Vh,[2,403],{217:82,221:83,227:[1,84]}),{6:[2,286],108:85,194:[1,86]},o($Vi,[2,288],{110:87,324:[1,88]}),o($Vj,[2,294],{113:89,324:[1,90]}),o($Vk,[2,299],{116:91,324:[1,92]}),{120:93,121:[2,301],324:[1,94]},{46:$Vl,123:95},{46:$Vl,123:97},{46:$Vl,123:98},{127:99,135:$Vm},{131:101,134:$Vn},o($Vo,[2,292]),o($Vo,[2,293]),o($Vp,[2,296]),o($Vp,[2,297]),o($Vp,[2,298]),{134:[2,310],135:[2,304]},{13:$Va,16:$Vb,60:103,315:$Vd},{20:104,45:$Vq,46:$Vr,57:105,58:$Vs,61:106},{20:109,45:$Vq,46:$Vr,57:110,58:$Vs,61:106},o($V8,[2,238],{43:111}),{45:[1,112],57:113,58:$Vs},o($Vt,[2,366],{182:114,183:115,184:116,48:[2,364]}),o($Vu,[2,250],{52:117}),o($Vu,[2,248],{60:61,321:118,13:$Va,16:$Vb,34:$Vc,315:$Vd}),o($Vu,[2,249]),o($Vv,[2,246]),o($Vv,[2,244]),o($Vv,[2,245]),o($Vw,[2,206]),o($Vw,[2,207]),o($Vw,[2,208]),{20:119,45:$Vq,46:$Vr,57:120,58:$Vs,61:106},o($V8,[2,8]),o($V8,[2,9],{33:121,34:$Ve,35:$Vf}),o($Vx,[2,228]),o($Vx,[2,13]),{13:$Va,16:$Vb,34:$Vy,35:$Vz,36:122,39:123,60:136,72:135,73:137,82:134,87:$VA,99:138,222:$VB,234:$VC,250:124,254:126,258:127,262:128,266:154,268:155,270:129,274:$VD,275:133,276:$VE,277:141,278:$VF,279:$VG,280:$VH,282:$VI,283:146,284:$VJ,285:$VK,286:149,287:$VL,288:$VM,291:$VN,293:$VO,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51},o($Vg,[2,10]),o($Vg,[2,233]),o($Vg,[2,230]),o($Vg,[2,231]),o($V0,[2,4]),{13:[1,176]},o($V61,[2,40]),{46:[1,178],58:[1,179],92:177},{46:[1,180]},{34:[1,182],95:181},o($V6,[2,395]),o([6,13,16,34,35,38,87,93,229,234,248,249,302,303,304,305,306,307,308,309,310,311,312,313,314,315,333],[2,116],{334:[1,183]}),{13:$Va,16:$Vb,35:[1,189],60:186,198:[1,187],218:184,219:185,222:[1,188],315:$Vd},o($Vh,[2,404]),{6:[2,53]},o($V0,$V1,{7:3,4:190}),{13:$Va,16:$Vb,60:191,315:$Vd},o($Vi,[2,289]),{114:192,121:[1,193],143:[1,195],145:194,323:[1,196],330:[1,197]},o($Vj,[2,295]),o($Vi,$V71,{117:198,144:200,121:$V81,143:$V91}),o($Vk,[2,300]),{121:[1,202]},{121:[2,302]},o($Va1,[2,58]),o($Vt,$Vb1,{146:203,153:204,154:205,48:$Vc1,121:$Vc1}),o($Va1,[2,59]),o($Va1,[2,60]),o($Vd1,[2,305],{128:206,131:207,134:$Vn}),{46:$Vl,123:208},o($Vd1,[2,311],{132:209,127:210,135:$Vm}),{46:$Vl,123:211},o([134,135],[2,66]),o($Ve1,$Vf1,{21:212,64:213,74:214,75:$Vg1}),o($V8,[2,225]),{46:$Vh1,62:216},o($Vi,[2,256],{59:218,323:[1,219]}),{46:[2,259]},o($Vi1,$Vj1,{24:220,63:221,67:222,68:$Vk1}),o($V8,[2,227]),{20:224,45:$Vq,46:$Vr,57:225,58:$Vs,61:106},{46:[1,226]},o($V9,[2,241]),{48:[1,227]},{48:[2,365]},{13:$Va,16:$Vb,34:$Vl1,35:$Vm1,39:232,60:237,87:$VA,93:$Vn1,99:238,155:228,186:229,188:230,229:$Vo1,234:$VC,246:231,247:236,248:$Vp1,249:$Vq1,266:154,268:155,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd},o($Vr1,[2,252],{61:106,53:242,57:243,20:244,45:$Vq,46:$Vr,58:$Vs}),o($Vv,[2,247]),o($Vi1,$Vj1,{63:221,67:222,24:245,68:$Vk1}),o($V8,[2,255]),o($Vx,[2,229]),{37:[1,246]},{37:[1,247]},o($Vs1,[2,437],{251:248}),{13:$Va,16:$Vb,34:$Vl1,39:251,60:237,87:$VA,93:$Vn1,99:238,121:[1,249],234:$VC,239:250,246:252,247:236,248:$Vp1,249:$Vq1,266:154,268:155,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd},o($Vt1,[2,439],{255:253}),o($Vt1,[2,153],{259:254,260:255,261:[2,447],298:[1,256],337:[1,257],338:[1,258],339:[1,259],340:[1,260],341:[1,261],342:[1,262]}),o($Vu1,[2,449],{263:263}),o($Vv1,[2,457],{271:264}),{13:$Va,16:$Vb,34:$Vy,35:$Vz,60:136,72:135,73:137,82:134,87:$VA,99:138,266:154,268:155,275:265,277:141,278:$VF,279:$VG,280:$VH,282:$VI,283:146,284:$VJ,285:$VK,286:149,287:$VL,288:$VM,291:$VN,293:$VO,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51},{13:$Va,16:$Vb,34:$Vy,35:$Vz,60:136,72:135,73:137,82:134,87:$VA,99:138,266:154,268:155,275:266,277:141,278:$VF,279:$VG,280:$VH,282:$VI,283:146,284:$VJ,285:$VK,286:149,287:$VL,288:$VM,291:$VN,293:$VO,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51},{13:$Va,16:$Vb,34:$Vy,35:$Vz,60:136,72:135,73:137,82:134,87:$VA,99:138,266:154,268:155,275:267,277:141,278:$VF,279:$VG,280:$VH,282:$VI,283:146,284:$VJ,285:$VK,286:149,287:$VL,288:$VM,291:$VN,293:$VO,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51},o($Vv1,[2,165]),o($Vv1,[2,166]),o($Vv1,[2,167]),o($Vv1,[2,168],{35:$Vw1,93:$Vx1}),o($Vv1,[2,169]),o($Vv1,[2,170]),o($Vv1,[2,171]),{13:$Va,16:$Vb,34:$Vy,35:$Vz,36:270,60:136,72:135,73:137,82:134,87:$VA,99:138,222:$VB,250:124,254:126,258:127,262:128,266:154,268:155,270:129,274:$VD,275:133,276:$VE,277:141,278:$VF,279:$VG,280:$VH,282:$VI,283:146,284:$VJ,285:$VK,286:149,287:$VL,288:$VM,291:$VN,293:$VO,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51},o($Vy1,[2,173]),{93:[1,271]},{35:[1,272]},{35:[1,273]},{35:[1,274]},{35:$Vz1,93:$VA1,180:275},{35:[1,278]},{35:[1,280],93:[1,279]},{287:[1,281]},o($VB1,[2,187],{300:[1,282],301:[1,283]}),o($VB1,[2,190]),o($VB1,[2,191]),o($VB1,[2,192]),o($VB1,[2,193]),o($VB1,[2,194]),o($VB1,[2,195]),{35:[1,284]},{35:[1,285]},{35:[1,286]},o($VC1,[2,461]),o($VC1,[2,462]),o($VC1,[2,463]),o($VC1,[2,464]),o($VC1,[2,465]),{287:[2,467]},o($VD1,[2,196]),o($VD1,[2,197]),o($VD1,[2,198]),o($VD1,[2,199]),o($VB1,[2,200]),o($VB1,[2,201]),o($VB1,[2,202]),o($VB1,[2,203]),o($VB1,[2,204]),o($VB1,[2,205]),o($V0,[2,5]),o($V61,[2,41]),o($VE1,[2,278],{97:287}),{34:[1,288]},o($VF1,[2,274],{94:289}),{34:[1,291],38:[1,290]},o($VG1,[2,276]),o($V6,[2,397]),o($VH1,[2,118]),o($VH1,[2,401],{220:292,335:293,26:[1,295],274:[1,296],336:[1,294]}),o($VI1,[2,119]),o($VI1,[2,120]),{13:$Va,16:$Vb,35:[1,300],60:301,93:[1,299],198:$VJ1,223:297,224:298,227:$VK1,315:$Vd},o($V6,$V3,{214:10,213:304}),o($V2,[2,285],{6:[2,287]}),o($Va1,[2,290],{111:305,141:306,142:[1,307]}),o($Va1,[2,55]),{13:$Va,16:$Vb,60:308,315:$Vd},o($Va1,[2,71]),o($Va1,[2,319]),o($Va1,[2,320]),o($Va1,[2,321]),{118:[1,309]},o($VL1,[2,68]),{13:$Va,16:$Vb,60:310,315:$Vd},o($Vi,[2,318]),{13:$Va,16:$Vb,60:311,315:$Vd},o($VM1,[2,324],{147:312}),o($VM1,[2,323]),{13:$Va,16:$Vb,34:$Vl1,35:$Vm1,39:232,60:237,87:$VA,93:$Vn1,99:238,155:313,186:229,188:230,229:$Vo1,234:$VC,246:231,247:236,248:$Vp1,249:$Vq1,266:154,268:155,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd},o($Vd1,[2,307],{129:314}),o($Vd1,[2,306]),o([45,134,137],[2,64]),o($Vd1,[2,313],{133:315}),o($Vd1,[2,312]),o([45,135,137],[2,63]),o($V7,[2,6]),o($VN1,[2,264],{65:316,77:317,78:[1,318]}),o($Ve1,[2,263]),{13:$Va,16:$Vb,35:$Vz,60:324,72:322,73:323,76:319,82:321,84:320,277:141,278:$VF,279:$VG,280:$VH,282:$VI,283:146,284:$VJ,285:$VK,286:149,287:$VL,288:$VM,291:$VN,293:$VO,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51},o([6,48,68,75,78,86,88,90],[2,21]),o($Vt,$VO1,{25:21,30:325,157:326,18:327,22:328,158:329,164:330,165:331,28:$V4,46:$VP1,48:$VP1,90:$VP1,121:$VP1,169:$VP1,170:$VP1,172:$VP1,175:$VP1,176:$VP1,177:$VP1}),{13:$Va,16:$Vb,60:332,315:$Vd},o($Vi,[2,257]),o($V7,[2,7]),o($Ve1,$Vf1,{64:213,74:214,21:333,75:$Vg1}),o($Vi1,[2,261]),{69:[1,334]},o($Vi1,$Vj1,{63:221,67:222,24:335,68:$Vk1}),o($V8,[2,239]),o($Vt,$Vb1,{154:205,47:336,153:337,48:[2,242]}),o($V8,[2,97]),{48:[2,368],185:338,331:[1,339]},{13:$Va,16:$Vb,34:$VQ1,60:344,187:340,191:341,196:342,198:$VR1,315:$Vd},o($VS1,[2,372],{191:341,196:342,60:344,189:346,190:347,187:348,13:$Va,16:$Vb,34:$VQ1,198:$VR1,315:$Vd}),o($VT1,[2,370]),o($VT1,[2,371]),{13:$Va,16:$Vb,34:$Vl1,35:$Vm1,39:354,60:237,87:$VA,93:$Vn1,99:238,188:352,200:350,228:349,229:$Vo1,232:351,234:$VC,246:353,247:236,248:$Vp1,249:$Vq1,266:154,268:155,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd},{13:$Va,16:$Vb,34:$VQ1,60:344,187:355,191:341,196:342,198:$VR1,315:$Vd},o($VU1,[2,142]),o($VU1,[2,143]),o($VU1,[2,144]),o($VU1,[2,145]),o($VU1,[2,146]),o($VU1,[2,147]),o($VU1,[2,148]),o($Vi1,$Vj1,{63:221,67:222,24:356,68:$Vk1}),o($Vu,[2,251]),o($Vr1,[2,253]),o($V7,[2,19]),{34:[1,357]},{34:[1,358]},o([37,38,194,281],[2,149],{252:359,253:[1,360]}),{13:$Va,16:$Vb,34:[1,362],60:363,235:361,315:$Vd},{13:$Va,16:$Vb,34:$VQ1,60:344,196:364,198:$VR1,315:$Vd},o($VT1,[2,423]),o($VT1,[2,424]),o($Vs1,[2,151],{256:365,257:[1,366]}),{13:$Va,16:$Vb,34:$Vy,35:$Vz,60:136,72:135,73:137,82:134,87:$VA,99:138,222:$VB,258:367,262:128,266:154,268:155,270:129,274:$VD,275:133,276:$VE,277:141,278:$VF,279:$VG,280:$VH,282:$VI,283:146,284:$VJ,285:$VK,286:149,287:$VL,288:$VM,291:$VN,293:$VO,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51},{261:[1,368]},o($VV1,[2,441]),o($VV1,[2,442]),o($VV1,[2,443]),o($VV1,[2,444]),o($VV1,[2,445]),o($VV1,[2,446]),{261:[2,448]},o([37,38,194,253,257,261,281,298,337,338,339,340,341,342],[2,156],{264:369,265:370,266:371,268:372,274:[1,373],276:[1,374],309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$}),o($Vu1,[2,160],{272:375,273:376,26:$VW1,334:$VX1}),o($Vv1,[2,162]),o($Vv1,[2,163]),o($Vv1,[2,164]),o($Vy1,[2,93]),o($VV1,[2,358],{178:379,319:[1,380]}),{38:[1,381]},o($Vy1,[2,174]),{13:$Va,16:$Vb,34:$Vy,35:$Vz,36:382,60:136,72:135,73:137,82:134,87:$VA,99:138,222:$VB,250:124,254:126,258:127,262:128,266:154,268:155,270:129,274:$VD,275:133,276:$VE,277:141,278:$VF,279:$VG,280:$VH,282:$VI,283:146,284:$VJ,285:$VK,286:149,287:$VL,288:$VM,291:$VN,293:$VO,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51},{13:$Va,16:$Vb,34:$Vy,35:$Vz,36:383,60:136,72:135,73:137,82:134,87:$VA,99:138,222:$VB,250:124,254:126,258:127,262:128,266:154,268:155,270:129,274:$VD,275:133,276:$VE,277:141,278:$VF,279:$VG,280:$VH,282:$VI,283:146,284:$VJ,285:$VK,286:149,287:$VL,288:$VM,291:$VN,293:$VO,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51},{13:$Va,16:$Vb,34:$Vy,35:$Vz,36:384,60:136,72:135,73:137,82:134,87:$VA,99:138,222:$VB,250:124,254:126,258:127,262:128,266:154,268:155,270:129,274:$VD,275:133,276:$VE,277:141,278:$VF,279:$VG,280:$VH,282:$VI,283:146,284:$VJ,285:$VK,286:149,287:$VL,288:$VM,291:$VN,293:$VO,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51},o($Vy1,[2,178]),o($Vy1,[2,95]),o($VV1,[2,362],{181:385}),{34:[1,386]},o($Vy1,[2,180]),{13:$Va,16:$Vb,34:$Vy,35:$Vz,36:387,60:136,72:135,73:137,82:134,87:$VA,99:138,222:$VB,250:124,254:126,258:127,262:128,266:154,268:155,270:129,274:$VD,275:133,276:$VE,277:141,278:$VF,279:$VG,280:$VH,282:$VI,283:146,284:$VJ,285:$VK,286:149,287:$VL,288:$VM,291:$VN,293:$VO,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51},{46:$Vh1,62:388},o($VB1,[2,188]),{13:$Va,16:$Vb,60:389,315:$Vd},o($VY1,[2,468],{289:390,319:[1,391]}),o($VV1,[2,472],{292:392,319:[1,393]}),o($VV1,[2,474],{294:394,319:[1,395]}),{13:$Va,16:$Vb,48:[1,396],60:398,87:$VA,98:397,99:399,100:400,101:$VZ1,234:$V_1,266:154,268:155,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd},o($V61,[2,45]),{48:[1,403],93:[1,404]},{46:[1,406],58:[1,407],96:405},o($VG1,[2,277]),o($VH1,[2,117]),o($VH1,[2,402]),o($VH1,[2,398]),o($VH1,[2,399]),o($VH1,[2,400]),o($VI1,[2,121]),o($VI1,[2,123]),o($VI1,[2,124]),o($V$1,[2,405],{225:408}),o($VI1,[2,126]),o($VI1,[2,127]),{13:$Va,16:$Vb,60:409,198:[1,410],315:$Vd},{38:[1,411]},o($Va1,[2,54]),o($Va1,[2,291]),{121:[1,412]},o($Va1,[2,70]),o($Vi,$V71,{144:200,117:413,121:$V81,143:$V91}),o($VL1,[2,69]),o($Va1,[2,57]),{48:[1,414],121:[1,416],148:415},o($VM1,[2,336],{156:417,331:[1,418]}),{45:[1,419],136:420,137:$V02},{45:[1,422],136:423,137:$V02},o($V12,[2,266],{66:424,85:425,86:[1,426],88:[1,427]}),o($VN1,[2,265]),{69:[1,428]},o($Ve1,[2,30],{277:141,283:146,286:149,82:321,72:322,73:323,60:324,84:429,13:$Va,16:$Vb,35:$Vz,278:$VF,279:$VG,280:$VH,282:$VI,284:$VJ,285:$VK,287:$VL,288:$VM,291:$VN,293:$VO,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51}),o($V22,[2,270]),o($V32,[2,90]),o($V32,[2,91]),o($V32,[2,92]),{35:$Vw1,93:$Vx1},{48:[1,430]},{48:[1,431]},{20:432,45:$Vq,46:$Vr,61:106},{20:433,45:$Vq,46:$Vr,61:106},o($V42,[2,340],{159:434}),o($V42,[2,339]),{13:$Va,16:$Vb,34:$Vl1,35:$V52,39:439,60:237,87:$VA,93:$Vn1,99:238,166:435,204:436,206:437,229:$V62,234:$VC,246:438,247:236,248:$Vp1,249:$Vq1,266:154,268:155,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd},o($Vu,[2,20]),o($V12,[2,22]),{13:$Va,16:$Vb,34:$V72,35:$V82,60:324,70:442,71:443,72:444,73:445,277:141,278:$VF,279:$VG,280:$VH,282:$VI,283:146,284:$VJ,285:$VK,286:149,287:$VL,288:$VM,291:$VN,293:$VO,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51},o($V7,[2,16]),{48:[1,448]},{48:[2,243]},{48:[2,98]},o($Vt,[2,367],{48:[2,369]}),o($VS1,[2,99]),o($V92,[2,374],{192:449}),o($Vt,[2,378],{197:450,199:451}),o($Vt,[2,105]),o($Vt,[2,106]),o($Vt,[2,107]),o($VS1,[2,100]),o($VS1,[2,101]),o($VS1,[2,373]),{13:$Va,16:$Vb,34:$Vl1,35:$Vm1,38:[1,452],39:354,60:237,87:$VA,93:$Vn1,99:238,188:352,200:453,229:$Vo1,232:351,234:$VC,246:353,247:236,248:$Vp1,249:$Vq1,266:154,268:155,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd},o($Va2,[2,409]),o($Vb2,[2,134]),o($Vb2,[2,135]),o($Vb2,[2,413]),o($Vb2,[2,414]),{230:[1,454]},o($V7,[2,18]),{38:[1,455]},{38:[1,456]},o($Vs1,[2,438]),{13:$Va,16:$Vb,34:$Vy,35:$Vz,60:136,72:135,73:137,82:134,87:$VA,99:138,222:$VB,250:457,254:126,258:127,262:128,266:154,268:155,270:129,274:$VD,275:133,276:$VE,277:141,278:$VF,279:$VG,280:$VH,282:$VI,283:146,284:$VJ,285:$VK,286:149,287:$VL,288:$VM,291:$VN,293:$VO,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51},{46:[1,458]},{46:[2,417]},{46:[2,418]},{13:$Va,16:$Vb,34:$Vl1,39:460,60:237,87:$VA,93:$Vn1,99:238,234:$VC,240:459,246:461,247:236,248:$Vp1,249:$Vq1,266:154,268:155,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd},o($Vt1,[2,440]),{13:$Va,16:$Vb,34:$Vy,35:$Vz,60:136,72:135,73:137,82:134,87:$VA,99:138,222:$VB,254:462,258:127,262:128,266:154,268:155,270:129,274:$VD,275:133,276:$VE,277:141,278:$VF,279:$VG,280:$VH,282:$VI,283:146,284:$VJ,285:$VK,286:149,287:$VL,288:$VM,291:$VN,293:$VO,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51},o($Vt1,[2,154]),{35:$Vz1,93:$VA1,180:463},o($Vu1,[2,450]),{13:$Va,16:$Vb,34:$Vy,35:$Vz,60:136,72:135,73:137,82:134,87:$VA,99:138,222:$VB,262:464,266:154,268:155,270:129,274:$VD,275:133,276:$VE,277:141,278:$VF,279:$VG,280:$VH,282:$VI,283:146,284:$VJ,285:$VK,286:149,287:$VL,288:$VM,291:$VN,293:$VO,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51},o($Vv1,[2,453],{267:465}),o($Vv1,[2,455],{269:466}),o($VV1,[2,451]),o($VV1,[2,452]),o($Vv1,[2,458]),{13:$Va,16:$Vb,34:$Vy,35:$Vz,60:136,72:135,73:137,82:134,87:$VA,99:138,222:$VB,266:154,268:155,270:467,274:$VD,275:133,276:$VE,277:141,278:$VF,279:$VG,280:$VH,282:$VI,283:146,284:$VJ,285:$VK,286:149,287:$VL,288:$VM,291:$VN,293:$VO,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51},o($VV1,[2,459]),o($VV1,[2,460]),o($VV1,[2,360],{179:468}),o($VV1,[2,359]),o([6,13,16,26,34,35,37,38,46,48,78,81,83,86,87,88,90,93,121,169,170,172,175,176,177,194,229,234,248,249,253,257,261,274,276,278,279,280,281,282,284,285,287,288,291,293,298,302,303,304,305,306,307,308,309,310,311,312,313,314,315,331,334,337,338,339,340,341,342,343,344,345,346,347],[2,172]),{38:[1,469]},{281:[1,470]},{281:[1,471]},{13:$Va,16:$Vb,34:$Vy,35:$Vz,36:472,60:136,72:135,73:137,82:134,87:$VA,99:138,222:$VB,250:124,254:126,258:127,262:128,266:154,268:155,270:129,274:$VD,275:133,276:$VE,277:141,278:$VF,279:$VG,280:$VH,282:$VI,283:146,284:$VJ,285:$VK,286:149,287:$VL,288:$VM,291:$VN,293:$VO,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51},{38:[1,473]},{38:[1,474]},o($Vy1,[2,182]),o($VB1,[2,189]),{13:$Va,16:$Vb,26:[1,476],34:$Vy,35:$Vz,36:477,60:136,72:135,73:137,82:134,87:$VA,99:138,222:$VB,250:124,254:126,258:127,262:128,266:154,268:155,270:129,274:$VD,275:133,276:$VE,277:141,278:$VF,279:$VG,280:$VH,282:$VI,283:146,284:$VJ,285:$VK,286:149,287:$VL,288:$VM,290:475,291:$VN,293:$VO,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51},o($VY1,[2,469]),{13:$Va,16:$Vb,34:$Vy,35:$Vz,36:478,60:136,72:135,73:137,82:134,87:$VA,99:138,222:$VB,250:124,254:126,258:127,262:128,266:154,268:155,270:129,274:$VD,275:133,276:$VE,277:141,278:$VF,279:$VG,280:$VH,282:$VI,283:146,284:$VJ,285:$VK,286:149,287:$VL,288:$VM,291:$VN,293:$VO,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51},o($VV1,[2,473]),{13:$Va,16:$Vb,34:$Vy,35:$Vz,36:479,60:136,72:135,73:137,82:134,87:$VA,99:138,222:$VB,250:124,254:126,258:127,262:128,266:154,268:155,270:129,274:$VD,275:133,276:$VE,277:141,278:$VF,279:$VG,280:$VH,282:$VI,283:146,284:$VJ,285:$VK,286:149,287:$VL,288:$VM,291:$VN,293:$VO,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51},o($VV1,[2,475]),o($V61,[2,44]),o($VE1,[2,279]),o($Vc2,[2,46]),o($Vc2,[2,47]),o($Vc2,[2,48]),o($Vc2,[2,49]),{13:$Va,16:$Vb,60:237,87:$VA,93:$Vn1,99:238,100:482,121:[1,480],234:$V_1,244:481,247:483,248:$Vp1,249:$Vq1,266:154,268:155,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd},o($V61,[2,42]),o($VF1,[2,275]),o($V61,[2,43]),o($Vd2,[2,280],{102:484}),{34:[1,485]},{13:$Va,16:$Vb,38:[2,407],60:301,198:$VJ1,224:487,226:486,227:$VK1,315:$Vd},o($VI1,[2,128]),o($VI1,[2,129]),o($VI1,[2,122]),{13:$Va,16:$Vb,60:488,315:$Vd},o($Va1,[2,56]),o([6,45,134,135,137,194],[2,72]),o($VM1,[2,325]),{13:$Va,16:$Vb,34:[1,490],60:491,149:489,315:$Vd},o($VM1,[2,74]),o($Vt,[2,335],{48:$Ve2,121:$Ve2}),{46:$Vh1,62:492},o($Vd1,[2,308]),o($Vi,[2,315],{138:493,323:[1,494]}),{46:$Vh1,62:495},o($Vd1,[2,314]),o($V12,[2,23]),o($V12,[2,267]),{87:[1,496]},{87:[1,497]},{13:$Va,16:$Vb,34:$Vf2,35:$Vz,60:324,72:322,73:323,79:498,80:499,81:$Vg2,82:321,83:$Vh2,84:502,277:141,278:$VF,279:$VG,280:$VH,282:$VI,283:146,284:$VJ,285:$VK,286:149,287:$VL,288:$VM,291:$VN,293:$VO,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51},o($V22,[2,271]),o($Vi2,[2,75]),o($Vi2,[2,76]),o($Ve1,$Vf1,{64:213,74:214,21:504,75:$Vg1}),o($Vi1,$Vj1,{63:221,67:222,24:505,68:$Vk1}),{46:[2,350],48:[2,77],89:516,90:$V5,121:[1,511],160:506,161:507,168:508,169:[1,509],170:[1,510],172:[1,512],175:[1,513],176:[1,514],177:[1,515]},o($V42,[2,348],{167:517,331:[1,518]}),o($V6,$V3,{214:10,205:519,208:520,213:521,34:$Vj2}),o($Vk2,[2,384],{214:10,208:520,213:521,207:523,205:524,13:$V3,16:$V3,35:$V3,198:$V3,222:$V3,227:$V3,315:$V3,34:$Vj2}),o($Vl2,[2,382]),o($Vl2,[2,383]),{13:$Va,16:$Vb,34:$Vl1,35:$V52,39:530,60:237,87:$VA,93:$Vn1,99:238,203:526,206:528,229:$V62,231:525,233:527,234:$VC,246:529,247:236,248:$Vp1,249:$Vq1,266:154,268:155,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd},o($V6,$V3,{214:10,208:520,213:521,205:531,34:$Vj2}),o($Vi1,[2,24],{277:141,283:146,286:149,60:324,72:444,73:445,71:532,13:$Va,16:$Vb,34:$V72,35:$V82,278:$VF,279:$VG,280:$VH,282:$VI,284:$VJ,285:$VK,287:$VL,288:$VM,291:$VN,293:$VO,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51}),o($Vm2,[2,268]),o($Vm2,[2,25]),o($Vm2,[2,26]),{13:$Va,16:$Vb,34:$Vy,35:$Vz,36:533,60:136,72:135,73:137,82:134,87:$VA,99:138,222:$VB,250:124,254:126,258:127,262:128,266:154,268:155,270:129,274:$VD,275:133,276:$VE,277:141,278:$VF,279:$VG,280:$VH,282:$VI,283:146,284:$VJ,285:$VK,286:149,287:$VL,288:$VM,291:$VN,293:$VO,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51},o($Vm2,[2,29]),o($Vi1,$Vj1,{63:221,67:222,24:534,68:$Vk1}),o([48,121,230,331],[2,102],{193:535,194:[1,536]}),o($V92,[2,104]),{13:$Va,16:$Vb,34:$Vl1,35:$Vm1,39:354,60:237,87:$VA,93:$Vn1,99:238,188:352,200:537,229:$Vo1,232:351,234:$VC,246:353,247:236,248:$Vp1,249:$Vq1,266:154,268:155,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd},o($Vn2,[2,130]),o($Va2,[2,410]),o($Vn2,[2,131]),o($Vx,[2,14]),o($Vx,[2,15]),o($Vs1,[2,150]),{13:$Va,16:$Vb,34:$Vl1,39:539,60:237,87:$VA,93:$Vn1,99:238,234:$VC,236:538,246:540,247:236,248:$Vp1,249:$Vq1,266:154,268:155,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd},{238:[1,541]},{238:[2,425]},{238:[2,426]},o($Vt1,[2,152]),o($Vt1,[2,155]),o($Vu1,[2,157]),o($Vu1,[2,158],{273:376,272:542,26:$VW1,334:$VX1}),o($Vu1,[2,159],{273:376,272:543,26:$VW1,334:$VX1}),o($Vv1,[2,161]),{13:$Va,16:$Vb,34:$Vy,35:$Vz,36:544,60:136,72:135,73:137,82:134,87:$VA,99:138,222:$VB,250:124,254:126,258:127,262:128,266:154,268:155,270:129,274:$VD,275:133,276:$VE,277:141,278:$VF,279:$VG,280:$VH,282:$VI,283:146,284:$VJ,285:$VK,286:149,287:$VL,288:$VM,291:$VN,293:$VO,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51},o($Vy1,[2,175]),{13:$Va,16:$Vb,34:$Vy,35:$Vz,36:545,60:136,72:135,73:137,82:134,87:$VA,99:138,222:$VB,250:124,254:126,258:127,262:128,266:154,268:155,270:129,274:$VD,275:133,276:$VE,277:141,278:$VF,279:$VG,280:$VH,282:$VI,283:146,284:$VJ,285:$VK,286:149,287:$VL,288:$VM,291:$VN,293:$VO,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51},{13:$Va,16:$Vb,34:$Vy,35:$Vz,36:546,60:136,72:135,73:137,82:134,87:$VA,99:138,222:$VB,250:124,254:126,258:127,262:128,266:154,268:155,270:129,274:$VD,275:133,276:$VE,277:141,278:$VF,279:$VG,280:$VH,282:$VI,283:146,284:$VJ,285:$VK,286:149,287:$VL,288:$VM,291:$VN,293:$VO,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51},{38:[1,547],281:[1,548]},o($Vy1,[2,179]),o($Vy1,[2,181]),{38:[1,549]},{38:[2,470]},{38:[2,471]},{38:[1,550]},{38:[2,476],194:[1,553],295:551,296:552},{13:$Va,16:$Vb,34:[1,555],60:556,241:554,315:$Vd},{13:$Va,16:$Vb,34:$VQ1,60:344,196:557,198:$VR1,315:$Vd},o($VT1,[2,433]),o($VT1,[2,434]),{35:[1,560],48:[1,558],103:559},o($V61,[2,51]),{38:[1,561]},{38:[2,408],333:[1,562]},o($Va1,[2,67]),{46:[1,563]},{46:[2,326]},{46:[2,327]},o($Va1,[2,61]),{13:$Va,16:$Vb,60:564,315:$Vd},o($Vi,[2,316]),o($Va1,[2,62]),o($V12,[2,36],{88:[1,565]}),o($V12,[2,37],{86:[1,566]}),o($VN1,[2,31],{277:141,283:146,286:149,82:321,72:322,73:323,60:324,84:502,80:567,13:$Va,16:$Vb,34:$Vf2,35:$Vz,81:$Vg2,83:$Vh2,278:$VF,279:$VG,280:$VH,282:$VI,284:$VJ,285:$VK,287:$VL,288:$VM,291:$VN,293:$VO,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51}),o($Vo2,[2,272]),{35:$Vz,82:568},{35:$Vz,82:569},o($Vo2,[2,34]),o($Vo2,[2,35]),{31:570,48:[2,234],89:571,90:$V5},{32:572,48:[2,236],89:573,90:$V5},o($V42,[2,341]),o($Vp2,[2,342],{162:574,331:[1,575]}),{46:$Vh1,62:576},{46:$Vh1,62:577},{46:$Vh1,62:578},{13:$Va,16:$Vb,34:[1,580],60:581,171:579,315:$Vd},o($Vq2,[2,354],{173:582,324:[1,583]}),{13:$Va,16:$Vb,35:$Vz,60:324,72:322,73:323,82:321,84:584,277:141,278:$VF,279:$VG,280:$VH,282:$VI,283:146,284:$VJ,285:$VK,286:149,287:$VL,288:$VM,291:$VN,293:$VO,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51},{35:[1,585]},{34:[1,586]},o($Vr2,[2,89]),o($V42,[2,79]),o($Vt,[2,347],{46:$Vs2,48:$Vs2,90:$Vs2,121:$Vs2,169:$Vs2,170:$Vs2,172:$Vs2,175:$Vs2,176:$Vs2,177:$Vs2}),o($Vk2,[2,110]),o($Vt,[2,388],{209:587}),o($Vt,[2,386]),o($Vt,[2,387]),o($Vk2,[2,111]),o($Vk2,[2,385]),{13:$Va,16:$Vb,34:$Vl1,35:$V52,38:[1,588],39:530,60:237,87:$VA,93:$Vn1,99:238,203:589,206:528,229:$V62,233:527,234:$VC,246:529,247:236,248:$Vp1,249:$Vq1,266:154,268:155,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd},o($Va2,[2,411]),o($Vt2,[2,136]),o($Vt2,[2,137]),o($Vt2,[2,415]),o($Vt2,[2,416]),{230:[1,590]},o($Vm2,[2,269]),{37:[1,592],38:[1,591]},o($V7,[2,17]),o($V92,[2,375]),o($V92,[2,376],{196:342,60:344,195:593,191:594,13:$Va,16:$Vb,34:$VQ1,198:$VR1,315:$Vd}),o($V92,[2,108],{281:[1,595]}),{13:$Va,16:$Vb,34:$VQ1,60:344,196:596,198:$VR1,315:$Vd},o($VT1,[2,419]),o($VT1,[2,420]),o($Vu2,[2,139]),o($Vv1,[2,454]),o($Vv1,[2,456]),{38:[1,597],281:[1,598]},{38:[1,599]},{281:[1,600]},o($Vy1,[2,96]),o($VV1,[2,363]),o($Vy1,[2,183]),o($Vy1,[2,184]),{38:[1,601]},{38:[2,477]},{297:[1,602]},{46:[1,603]},{46:[2,427]},{46:[2,428]},{13:$Va,16:$Vb,60:237,87:$VA,93:$Vn1,99:238,100:605,234:$V_1,245:604,247:606,248:$Vp1,249:$Vq1,266:154,268:155,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd},o($V61,[2,50]),o($Vd2,[2,281]),{13:$Va,16:$Vb,60:398,87:$VA,98:608,99:399,100:400,101:$VZ1,104:607,234:$V_1,266:154,268:155,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd},o($VI1,[2,125]),o($V$1,[2,406]),o($Vt,$Vb1,{154:205,150:609,153:610,48:[2,328]}),o($Vd1,[2,65]),{87:[1,611]},{87:[1,612]},o($Vo2,[2,273]),o($Vo2,[2,32]),o($Vo2,[2,33]),{48:[2,11]},{48:[2,235]},{48:[2,12]},{48:[2,237]},o($Vt,$VO1,{165:331,163:613,164:614,46:$Vv2,48:$Vv2,90:$Vv2,121:$Vv2,169:$Vv2,170:$Vv2,172:$Vv2,175:$Vv2,176:$Vv2,177:$Vv2}),o($Vp2,[2,343]),o($Vr2,[2,80],{332:[1,615]}),o($Vr2,[2,81]),o($Vr2,[2,82]),{46:$Vh1,62:616},{46:[2,352]},{46:[2,353]},{13:$Va,16:$Vb,34:[1,618],60:619,174:617,315:$Vd},o($Vq2,[2,355]),o($Vr2,[2,85]),{13:$Va,16:$Vb,34:$Vy,35:$Vz,36:620,39:621,60:136,72:135,73:137,82:134,87:$VA,99:138,222:$VB,234:$VC,250:124,254:126,258:127,262:128,266:154,268:155,270:129,274:$VD,275:133,276:$VE,277:141,278:$VF,279:$VG,280:$VH,282:$VI,283:146,284:$VJ,285:$VK,286:149,287:$VL,288:$VM,291:$VN,293:$VO,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51},{46:$Vh1,62:622},{13:$Va,16:$Vb,34:$Vl1,35:$V52,39:530,60:237,87:$VA,93:$Vn1,99:238,203:623,206:528,229:$V62,233:527,234:$VC,246:529,247:236,248:$Vp1,249:$Vq1,266:154,268:155,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd},o($Vw2,[2,132]),o($Va2,[2,412]),o($Vw2,[2,133]),o($Vm2,[2,27]),{34:[1,624]},o($V92,[2,103]),o($V92,[2,377]),o($Vt,[2,379]),{13:$Va,16:$Vb,34:$Vl1,39:626,60:237,87:$VA,93:$Vn1,99:238,234:$VC,237:625,246:627,247:236,248:$Vp1,249:$Vq1,266:154,268:155,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd},o($Vy1,[2,94]),o($VV1,[2,361]),o($Vy1,[2,176]),{13:$Va,16:$Vb,34:$Vy,35:$Vz,36:628,60:136,72:135,73:137,82:134,87:$VA,99:138,222:$VB,250:124,254:126,258:127,262:128,266:154,268:155,270:129,274:$VD,275:133,276:$VE,277:141,278:$VF,279:$VG,280:$VH,282:$VI,283:146,284:$VJ,285:$VK,286:149,287:$VL,288:$VM,291:$VN,293:$VO,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd,342:$V01,343:$V11,344:$V21,345:$V31,346:$V41,347:$V51},o($Vy1,[2,185]),{298:[1,629]},{13:$Va,16:$Vb,60:237,87:$VA,93:$Vn1,99:238,100:631,234:$V_1,242:630,247:632,248:$Vp1,249:$Vq1,266:154,268:155,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd},{238:[1,633]},{238:[2,435]},{238:[2,436]},{13:$Va,16:$Vb,38:[1,634],60:398,87:$VA,98:635,99:399,100:400,101:$VZ1,234:$V_1,266:154,268:155,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd},o($Vx2,[2,282]),{48:[1,636]},{48:[2,329]},o($V12,[2,38]),o($V12,[2,39]),o($V42,[2,78]),o($V42,[2,345]),{46:[2,351]},o($Vr2,[2,83]),{46:$Vh1,62:637},{46:[2,356]},{46:[2,357]},{37:[1,638]},{37:[1,639]},o($Vr2,[2,88]),o($Vy2,[2,390],{210:640,281:[1,641]}),{38:[1,642]},{48:[1,643]},{48:[2,421]},{48:[2,422]},{38:[1,644]},{299:645,305:$VS,306:$VT,307:$VU,308:$VV},{13:$Va,16:$Vb,34:$VQ1,60:344,196:646,198:$VR1,315:$Vd},o($VT1,[2,429]),o($VT1,[2,430]),o($Vz2,[2,141]),o($Vd2,[2,52]),o($Vx2,[2,283]),o($VA2,[2,330],{151:647,331:[1,648]}),o($Vr2,[2,84]),{34:[1,649]},{34:[1,650]},o([46,48,90,121,169,170,172,175,176,177,230,331],[2,112],{211:651,194:[1,652]}),o($Vt,[2,389]),o($Vm2,[2,28]),{238:[1,653]},o($Vy1,[2,177]),{38:[2,186]},{13:$Va,16:$Vb,60:237,87:$VA,93:$Vn1,99:238,100:655,234:$V_1,243:654,247:656,248:$Vp1,249:$Vq1,266:154,268:155,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd},o($Vt,$Vb1,{154:205,152:657,153:658,48:$VB2,121:$VB2}),o($VA2,[2,331]),{38:[1,659]},{38:[1,660]},o($Vy2,[2,391]),o($Vy2,[2,113],{214:10,212:661,213:662,13:$V3,16:$V3,35:$V3,198:$V3,222:$V3,227:$V3,315:$V3,34:[1,663]}),o($Vu2,[2,138]),{48:[1,664]},{48:[2,431]},{48:[2,432]},o($VM1,[2,73]),o($VM1,[2,333]),o($Vr2,[2,86]),o($Vr2,[2,87]),o($Vt,[2,380],{201:665,202:666}),o($Vt,[2,392]),o($Vt,[2,393]),{238:[1,667]},o($Vy2,[2,114]),{13:$Va,16:$Vb,34:$Vl1,35:$V52,39:530,60:237,87:$VA,93:$Vn1,99:238,203:668,206:528,229:$V62,233:527,234:$VC,246:529,247:236,248:$Vp1,249:$Vq1,266:154,268:155,299:150,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$VZ,313:$V_,314:$V$,315:$Vd},o($Vz2,[2,140]),o($Vy2,[2,109],{281:[1,669]}),o($Vt,[2,381])],
defaultActions: {5:[2,211],6:[2,212],7:[2,213],9:[2,210],28:[2,1],29:[2,3],30:[2,223],85:[2,53],94:[2,302],108:[2,259],115:[2,365],165:[2,467],262:[2,448],337:[2,243],338:[2,98],362:[2,417],363:[2,418],460:[2,425],461:[2,426],476:[2,470],477:[2,471],490:[2,326],491:[2,327],552:[2,477],555:[2,427],556:[2,428],570:[2,11],571:[2,235],572:[2,12],573:[2,237],580:[2,352],581:[2,353],605:[2,435],606:[2,436],610:[2,329],615:[2,351],618:[2,356],619:[2,357],626:[2,421],627:[2,422],645:[2,186],655:[2,431],656:[2,432]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  /*
    SPARQL parser in the Jison parser generator format.
  */

  var Wildcard = require('./Wildcard').Wildcard;

  // Common namespaces and entities
  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean';

  var base = '', basePath = '', baseRoot = '';

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() {
    var union = [];
    for (var i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // Resolves an IRI against a base path
  function resolveIRI(iri) {
    // Strip off possible angular brackets
    if (iri[0] === '<')
      iri = iri.substring(1, iri.length - 1);
    // Return absolute IRIs unmodified
    if (/^[a-z]+:/i.test(iri))
      return iri;
    if (!Parser.base)
      throw new Error('Cannot resolve relative IRI ' + iri + ' because no base IRI was set.');
    if (base !== Parser.base) {
      base = Parser.base;
      basePath = base.replace(/[^\/:]*$/, '');
      baseRoot = base.match(/^(?:[a-z]+:\/*)?[^\/]*/)[0];
    }
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined:
      return base;
    // Resolve relative fragment IRIs against the base IRI
    case '#':
      return base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?':
      return base.replace(/(?:\?.*)?$/, iri);
    // Resolve root relative IRIs at the root of the base IRI
    case '/':
      return baseRoot + iri;
    // Resolve all other IRIs at the base IRI's path
    default:
      return basePath + iri;
    }
  }

  // If the item is a variable, ensures it starts with a question mark
  function toVar(variable) {
    if (variable) {
      var first = variable[0];
      if (first === '?' || first === '$') return Parser.factory.variable(variable.substr(1));
    }
    return variable;
  }

  // Creates an operation with the given name and arguments
  function operation(operatorName, args) {
    return { type: 'operation', operator: operatorName, args: args || [] };
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    var expression = { expression: expr === '*'? new Wildcard() : expr };
    if (attr)
      for (var a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Transforms a list of operations types and arguments into a tree of operations
  function createOperationTree(initialExpression, operationList) {
    for (var i = 0, l = operationList.length, item; i < l && (item = operationList[i]); i++)
      initialExpression = operation(item[0], [initialExpression, item[1]]);
    return initialExpression;
  }

  // Group datasets by default and named
  function groupDatasets(fromClauses, groupName) {
    var defaults = [], named = [], l = fromClauses.length, fromClause, group = {};
    if (!l)
      return null;
    for (var i = 0; i < l && (fromClause = fromClauses[i]); i++)
      (fromClause.named ? named : defaults).push(fromClause.iri);
    group[groupName || 'from'] = { default: defaults, named: named };
    return group;
  }

  // Converts the string to a number
  function toInt(string) {
    return parseInt(string, 10);
  }

  // Transforms a possibly single group into its patterns
  function degroupSingle(group) {
    return group.type === 'group' && group.patterns.length === 1 ? group.patterns[0] : group;
  }

  // Creates a literal with the given value and type
  function createTypedLiteral(value, type) {
    if (type && type.termType !== 'NamedNode'){
      type = Parser.factory.namedNode(type);
    }
    return Parser.factory.literal(value, type);
  }

  // Creates a literal with the given value and language
  function createLangLiteral(value, lang) {
    return Parser.factory.literal(value, lang);
  }

  // Creates a triple with the given subject, predicate, and object
  function triple(subject, predicate, object) {
    var triple = {};
    if (subject   != null) triple.subject   = subject;
    if (predicate != null) triple.predicate = predicate;
    if (object    != null) triple.object    = object;
    return triple;
  }

  // Creates a new blank node
  function blank(name) {
    if (typeof name === 'string') {  // Only use name if a name is given
      if (name.startsWith('e_')) return Parser.factory.blankNode(name);
      return Parser.factory.blankNode('e_' + name);
    }
    return Parser.factory.blankNode('g_' + blankId++);
  };
  var blankId = 0;
  Parser._resetBlanks = function () { blankId = 0; }

  // Regular expression and replacement strings to escape strings
  var escapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g,
      escapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                             't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      partialSurrogatesWithoutEndpoint = /[\uD800-\uDBFF]([^\uDC00-\uDFFF]|$)/,
      fromCharCode = String.fromCharCode;

  // Translates escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    try {
      string = string.replace(escapeSequence, function (sequence, unicode4, unicode8, escapedChar) {
        var charCode;
        if (unicode4) {
          charCode = parseInt(unicode4, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          return fromCharCode(charCode);
        }
        else if (unicode8) {
          charCode = parseInt(unicode8, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          if (charCode < 0xFFFF) return fromCharCode(charCode);
          return fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
        }
        else {
          var replacement = escapeReplacements[escapedChar];
          if (!replacement) throw new Error();
          return replacement;
        }
      });
    }
    catch (error) { return ''; }

    // Test for invalid unicode surrogate pairs
    if (partialSurrogatesWithoutEndpoint.exec(string)) {
      throw new Error('Invalid unicode codepoint of surrogate pair without corresponding codepoint in ' + string);
    }

    return string;
  }

  // Creates a list, collecting its (possibly blank) items and triples associated with those items
  function createList(objects) {
    var list = blank(), head = list, listItems = [], listTriples, triples = [];
    objects.forEach(function (o) { listItems.push(o.entity); appendAllTo(triples, o.triples); });

    // Build an RDF list out of the items
    for (var i = 0, j = 0, l = listItems.length, listTriples = Array(l * 2); i < l;)
      listTriples[j++] = triple(head, Parser.factory.namedNode(RDF_FIRST), listItems[i]),
      listTriples[j++] = triple(head, Parser.factory.namedNode(RDF_REST),  head = ++i < l ? blank() : Parser.factory.namedNode(RDF_NIL));

    // Return the list's identifier, its triples, and the triples associated with its items
    return { entity: list, triples: appendAllTo(listTriples, triples) };
  }

  // Creates a blank node identifier, collecting triples with that blank node as subject
  function createAnonymousObject(propertyList) {
    var entity = blank();
    return {
      entity: entity,
      triples: propertyList.map(function (t) { return extend(triple(entity), t); })
    };
  }

  // Collects all (possibly blank) objects, and triples that have them as subject
  function objectListToTriples(predicate, objectList, otherTriples) {
    var objects = [], triples = [];
    objectList.forEach(function (l) {
      objects.push(triple(null, predicate, l.entity));
      appendAllTo(triples, l.triples);
    });
    return unionAll(objects, otherTriples || [], triples);
  }

  // Simplifies groups by merging adjacent BGPs
  function mergeAdjacentBGPs(groups) {
    var merged = [], currentBgp;
    for (var i = 0, group; group = groups[i]; i++) {
      switch (group.type) {
        // Add a BGP's triples to the current BGP
        case 'bgp':
          if (group.triples.length) {
            if (!currentBgp)
              appendTo(merged, currentBgp = group);
            else
              appendAllTo(currentBgp.triples, group.triples);
          }
          break;
        // All other groups break up a BGP
        default:
          // Only add the group if its pattern is non-empty
          if (!group.patterns || group.patterns.length > 0) {
            appendTo(merged, group);
            currentBgp = null;
          }
      }
    }
    return merged;
  }

  // Return the id of an expression
  function getExpressionId(expression) {
    return expression.variable ? expression.variable.value : expression.value || expression.expression.value;
  }

  // Get all "aggregate"'s from an expression
  function getAggregatesOfExpression(expression) {
    if (!expression) {
      return [];
    }
    if (expression.type === 'aggregate') {
      return [expression];
    } else if (expression.type === "operation") {
      const aggregates = [];
      for (const arg of expression.args) {
        aggregates.push(...getAggregatesOfExpression(arg));
      }
      return aggregates;
    }
    return [];
  }

  // Get all variables used in an expression
  function getVariablesFromExpression(expression) {
    const variables = new Set();
    const visitExpression = function (expr) {
      if (!expr) { return; }
      if (expr.termType === "Variable") {
        variables.add(expr);
      } else if (expr.type === "operation") {
        expr.args.forEach(visitExpression);
      }
    };
    visitExpression(expression);
    return variables;
  }

  // Helper function to flatten arrays
  function flatten(input, depth = 1, stack = []) {
    for (const item of input) {
        if (depth > 0 && item instanceof Array) {
          flatten(item, depth - 1, stack);
        } else {
          stack.push(item);
        }
    }
    return stack;
  }

  function isVariable(term) {
    return term.termType === 'Variable';
  }

  function getBoundVarsFromGroupGraphPattern(pattern) {
    if (pattern.triples) {
      const boundVars = [];
      for (const triple of pattern.triples) {
        if (isVariable(triple.subject)) boundVars.push(triple.subject.value);
        if (isVariable(triple.predicate)) boundVars.push(triple.predicate.value);
        if (isVariable(triple.object)) boundVars.push(triple.object.value);
      }
      return boundVars;
    } else if (pattern.patterns) {
      const boundVars = [];
      for (const pat of pattern.patterns) {
        boundVars.push(...getBoundVarsFromGroupGraphPattern(pat));
      }
      return boundVars;
    }
    return [];
  }

  // Helper function to find duplicates in array
  function getDuplicatesInArray(array) {
    const sortedArray = array.slice().sort();
    const duplicates = [];
    for (let i = 0; i < sortedArray.length - 1; i++) {
      if (sortedArray[i + 1] == sortedArray[i]) {
        duplicates.push(sortedArray[i]);
      }
    }
    return duplicates;
  }

  function ensureSparqlStar(value) {
    if (!Parser.sparqlStar) {
      throw new Error('SPARQL* support is not enabled');
    }
    return value;
  }

  function ensureNoVariables(operations) {
    for (const operation of operations) {
      if (operation.type === 'graph' && operation.name.termType === 'Variable') {
        throw new Error('Detected illegal variable in GRAPH');
      }
      if (operation.type === 'bgp' || operation.type === 'graph') {
        for (const triple of operation.triples) {
          if (triple.subject.termType === 'Variable' ||
              triple.predicate.termType === 'Variable' ||
              triple.object.termType === 'Variable') {
            throw new Error('Detected illegal variable in BGP');
          }
        }
      }
    }
    return operations;
  }

  function ensureNoBnodes(operations) {
    for (const operation of operations) {
      if (operation.type === 'bgp') {
        for (const triple of operation.triples) {
          if (triple.subject.termType === 'BlankNode' ||
              triple.predicate.termType === 'BlankNode' ||
              triple.object.termType === 'BlankNode') {
            throw new Error('Detected illegal blank node in BGP');
          }
        }
      }
    }
    return operations;
  }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore */
break;
case 1:return 12
break;
case 2:return 15
break;
case 3:return 28
break;
case 4:return 319
break;
case 5:return 320
break;
case 6:return 35
break;
case 7:return 37
break;
case 8:return 38
break;
case 9:return 26
break;
case 10:return 41
break;
case 11:return 45
break;
case 12:return 46
break;
case 13:return 48
break;
case 14:return 50
break;
case 15:return 55
break;
case 16:return 58
break;
case 17:return 323
break;
case 18:return 68
break;
case 19:return 69
break;
case 20:return 75
break;
case 21:return 78
break;
case 22:return 81
break;
case 23:return 83
break;
case 24:return 86
break;
case 25:return 88
break;
case 26:return 90
break;
case 27:return 194
break;
case 28:return 109
break;
case 29:return 324
break;
case 30:return 142
break;
case 31:return 325
break;
case 32:return 326
break;
case 33:return 119
break;
case 34:return 327
break;
case 35:return 118
break;
case 36:return 328
break;
case 37:return 329
break;
case 38:return 122
break;
case 39:return 124
break;
case 40:return 125
break;
case 41:return 140
break;
case 42:return 134
break;
case 43:return 135
break;
case 44:return 137
break;
case 45:return 143
break;
case 46:return 121
break;
case 47:return 330
break;
case 48:return 331
break;
case 49:return 169
break;
case 50:return 172
break;
case 51:return 177
break;
case 52:return 176
break;
case 53:return 101
break;
case 54:return 170
break;
case 55:return 332
break;
case 56:return 175
break;
case 57:return 234
break;
case 58:return 238
break;
case 59:return 281
break;
case 60:return 198
break;
case 61:return 333
break;
case 62:return 334
break;
case 63:return 227
break;
case 64:return 336
break;
case 65:return 274
break;
case 66:return 222
break;
case 67:return 229
break;
case 68:return 230
break;
case 69:return 253
break;
case 70:return 257
break;
case 71:return 298
break;
case 72:return 337
break;
case 73:return 338
break;
case 74:return 339
break;
case 75:return 340
break;
case 76:return 341
break;
case 77:return 261
break;
case 78:return 342
break;
case 79:return 276
break;
case 80:return 284
break;
case 81:return 285
break;
case 82:return 278
break;
case 83:return 279
break;
case 84:return 280
break;
case 85:return 343
break;
case 86:return 344
break;
case 87:return 282
break;
case 88:return 346
break;
case 89:return 345
break;
case 90:return 347
break;
case 91:return 287
break;
case 92:return 288
break;
case 93:return 291
break;
case 94:return 293
break;
case 95:return 297
break;
case 96:return 301
break;
case 97:return 304
break;
case 98:return 13
break;
case 99:return 16
break;
case 100:return 315
break;
case 101:return 248
break;
case 102:return 34
break;
case 103:return 300
break;
case 104:return 87
break;
case 105:return 302
break;
case 106:return 303
break;
case 107:return 309
break;
case 108:return 310
break;
case 109:return 311
break;
case 110:return 312
break;
case 111:return 313
break;
case 112:return 314
break;
case 113:return 'EXPONENT'
break;
case 114:return 305
break;
case 115:return 306
break;
case 116:return 307
break;
case 117:return 308
break;
case 118:return 93
break;
case 119:return 249
break;
case 120:return 6
break;
case 121:return 'INVALID'
break;
case 122:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+|(#[^\n\r]*))/i,/^(?:BASE)/i,/^(?:PREFIX)/i,/^(?:SELECT)/i,/^(?:DISTINCT)/i,/^(?:REDUCED)/i,/^(?:\()/i,/^(?:AS)/i,/^(?:\))/i,/^(?:\*)/i,/^(?:CONSTRUCT)/i,/^(?:WHERE)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:DESCRIBE)/i,/^(?:ASK)/i,/^(?:FROM)/i,/^(?:NAMED)/i,/^(?:GROUP)/i,/^(?:BY)/i,/^(?:HAVING)/i,/^(?:ORDER)/i,/^(?:ASC)/i,/^(?:DESC)/i,/^(?:LIMIT)/i,/^(?:OFFSET)/i,/^(?:VALUES)/i,/^(?:;)/i,/^(?:LOAD)/i,/^(?:SILENT)/i,/^(?:INTO)/i,/^(?:CLEAR)/i,/^(?:DROP)/i,/^(?:CREATE)/i,/^(?:ADD)/i,/^(?:TO)/i,/^(?:MOVE)/i,/^(?:COPY)/i,/^(?:INSERT((\s+|(#[^\n\r]*)\n\r?)+)DATA)/i,/^(?:DELETE((\s+|(#[^\n\r]*)\n\r?)+)DATA)/i,/^(?:DELETE((\s+|(#[^\n\r]*)\n\r?)+)WHERE)/i,/^(?:WITH)/i,/^(?:DELETE)/i,/^(?:INSERT)/i,/^(?:USING)/i,/^(?:DEFAULT)/i,/^(?:GRAPH)/i,/^(?:ALL)/i,/^(?:\.)/i,/^(?:OPTIONAL)/i,/^(?:SERVICE)/i,/^(?:QUERY)/i,/^(?:BIND)/i,/^(?:UNDEF)/i,/^(?:MINUS)/i,/^(?:UNION)/i,/^(?:FILTER)/i,/^(?:<<)/i,/^(?:>>)/i,/^(?:,)/i,/^(?:a)/i,/^(?:\|)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:\?)/i,/^(?:\+)/i,/^(?:!)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:IN)/i,/^(?:NOT)/i,/^(?:-)/i,/^(?:BOUND)/i,/^(?:BNODE)/i,/^(?:(RAND|NOW|UUID|STRUUID))/i,/^(?:(LANG|DATATYPE|IRI|URI|ABS|CEIL|FLOOR|ROUND|STRLEN|STR|UCASE|LCASE|ENCODE_FOR_URI|YEAR|MONTH|DAY|HOURS|MINUTES|SECONDS|TIMEZONE|TZ|MD5|SHA1|SHA256|SHA384|SHA512|isIRI|isURI|isBLANK|isLITERAL|isNUMERIC))/i,/^(?:(LANGMATCHES|CONTAINS|STRSTARTS|STRENDS|STRBEFORE|STRAFTER|STRLANG|STRDT|sameTerm))/i,/^(?:CONCAT)/i,/^(?:COALESCE)/i,/^(?:IF)/i,/^(?:REGEX)/i,/^(?:SUBSTR)/i,/^(?:REPLACE)/i,/^(?:EXISTS)/i,/^(?:COUNT)/i,/^(?:SUM|MIN|MAX|AVG|SAMPLE)/i,/^(?:GROUP_CONCAT)/i,/^(?:SEPARATOR)/i,/^(?:\^\^)/i,/^(?:true|false)/i,/^(?:(<(?:[^<>\"\{\}\|\^`\\\u0000-\u0020])*>))/i,/^(?:((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])(?:(?:(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])|\.)*(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040]))?)?:))/i,/^(?:(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])(?:(?:(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])|\.)*(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040]))?)?:)((?:((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|:|[0-9]|((%([0-9A-Fa-f])([0-9A-Fa-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))(?:(?:(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])|\.|:|((%([0-9A-Fa-f])([0-9A-Fa-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(?:(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])|:|((%([0-9A-Fa-f])([0-9A-Fa-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/i,/^(?:(_:(?:((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9])(?:(?:(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])|\.)*(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040]))?))/i,/^(?:([\?\$]((?:((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9])(?:((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])*)))/i,/^(?:(@[a-zA-Z]+(?:-[a-zA-Z0-9]+)*))/i,/^(?:([0-9]+))/i,/^(?:([0-9]*\.[0-9]+))/i,/^(?:([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+)))/i,/^(?:(\+([0-9]+)))/i,/^(?:(\+([0-9]*\.[0-9]+)))/i,/^(?:(\+([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+))))/i,/^(?:(-([0-9]+)))/i,/^(?:(-([0-9]*\.[0-9]+)))/i,/^(?:(-([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+))))/i,/^(?:([eE][+-]?[0-9]+))/i,/^(?:('(?:(?:[^\u0027\u005C\u000A\u000D])|(\\[tbnrf\\\"']|\\u([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])|\\U([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])))*'))/i,/^(?:("(?:(?:[^\u0022\u005C\u000A\u000D])|(\\[tbnrf\\\"']|\\u([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])|\\U([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])))*"))/i,/^(?:('''(?:(?:'|'')?(?:[^'\\]|(\\[tbnrf\\\"']|\\u([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])|\\U([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f]))))*'''))/i,/^(?:("""(?:(?:"|"")?(?:[^\"\\]|(\\[tbnrf\\\"']|\\u([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])|\\U([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f]))))*"""))/i,/^(?:(\((\u0020|\u0009|\u000D|\u000A)*\)))/i,/^(?:(\[(\u0020|\u0009|\u000D|\u000A)*\]))/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();module.exports=SparqlParser
